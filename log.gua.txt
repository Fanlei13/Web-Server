20:22:07 完整请求
20:22:07 请求结束
20:22:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:22:07 path and query /api/todo/add {} {"title":"吃饭"}
20:22:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488975727,
  "id": 5,
  "completed": false,
  "title": "吃饭",
  "ut": 1488975727
}
20:24:01 完整请求
20:24:01 请求结束
20:24:01 完整请求
20:24:01 请求结束
20:24:01 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:01 path and query /todo/index {} 
20:24:01 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:24:01 完整请求
20:24:01 请求结束
20:24:01 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:01 path and query /static {'file': 'gua.js'} 
20:24:01 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
20:24:01 完整请求
20:24:01 请求结束
20:24:01 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:01 path and query /static {'file': 'todo.js'} 
20:24:01 响应
 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:24:01 完整请求
20:24:01 请求结束
20:24:02 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:02 path and query /api/todo/all {} 
20:24:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488975727,
    "id": 5,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975727
  }
]
20:24:15 完整请求
20:24:15 请求结束
20:24:15 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:24:15 path and query /api/todo/add {} {"title":"hello"}
20:24:15 响应
HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488975855,
  "id": 6,
  "completed": false,
  "title": "hello",
  "ut": 1488975855
}
20:26:52 完整请求
20:26:52 请求结束
20:26:52 完整请求
20:26:52 请求结束
20:26:52 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:26:52 path and query /api/todo/add {} {"title":"hello瓜"}
20:26:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488976012,
  "id": 7,
  "completed": false,
  "title": "hello瓜",
  "ut": 1488976012
}
20:29:00 完整请求
20:29:00 请求结束
20:31:03 完整请求
20:31:03 请求结束
20:31:03 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:31:03 path and query /api/todo/add {} {"title":"hello瓜"}
20:31:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488976263,
  "id": 8,
  "completed": false,
  "title": "hello瓜",
  "ut": 1488976263
}
20:31:22 完整请求
20:31:22 请求结束
20:33:07 完整请求
20:33:07 完整请求
20:33:07 完整请求
20:33:07 完整请求
20:33:07 完整请求
20:33:07 请求结束
20:33:07 请求结束
20:33:07 请求结束
20:33:07 请求结束
20:33:07 请求结束
20:33:07 完整请求
20:33:07 请求结束
20:33:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:07 path and query /todo/index {} 
20:33:07 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:33:07 完整请求
20:33:07 请求结束
20:33:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:07 path and query /todo/index {} 
20:33:07 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:33:07 完整请求
20:33:07 请求结束
20:33:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:07 path and query /static {'file': 'gua.js'} 
20:33:07 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
20:33:07 完整请求
20:33:07 请求结束
20:33:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:08 path and query /static {'file': 'todo.js'} 
20:33:08 响应
 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            todoCell.remove()
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:33:08 完整请求
20:33:08 请求结束
20:33:08 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:08 path and query /api/todo/all {} 
20:33:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488975727,
    "id": 5,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975727
  },
  {
    "ct": 1488975855,
    "id": 6,
    "completed": false,
    "title": "hello",
    "ut": 1488975855
  },
  {
    "ct": 1488976012,
    "id": 7,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976012
  },
  {
    "ct": 1488976263,
    "id": 8,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976263
  }
]
20:33:14 完整请求
20:33:14 请求结束
20:33:14 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:14 path and query /todo/index {} 
20:33:14 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:33:15 完整请求
20:33:15 完整请求
20:33:15 请求结束
20:33:15 请求结束
20:33:15 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:15 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:15 path and query /static {'file': 'gua.js'} 
20:33:15 path and query /static {'file': 'todo.js'} 
20:33:15 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}
20:33:15 响应
 HTTP/1.1 200 OK

var todoTemplate = function(title) {
    var t = `
        <div class="todo-cell">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var title = todo.title
    var todoCell = todoTemplate(title)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            todoCell.remove()
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:33:15 完整请求
20:33:15 请求结束
20:33:15 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:33:15 path and query /api/todo/all {} 
20:33:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488975727,
    "id": 5,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975727
  },
  {
    "ct": 1488975855,
    "id": 6,
    "completed": false,
    "title": "hello",
    "ut": 1488975855
  },
  {
    "ct": 1488976012,
    "id": 7,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976012
  },
  {
    "ct": 1488976263,
    "id": 8,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976263
  }
]
20:39:22 完整请求
20:39:22 请求结束
20:39:22 完整请求
20:39:22 请求结束
20:39:22 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:22 path and query /todo/index {} 
20:39:22 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:39:22 完整请求
20:39:22 请求结束
20:39:22 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:22 path and query /static {'file': 'gua.js'} 
20:39:22 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:39:22 完整请求
20:39:22 请求结束
20:39:22 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:22 path and query /static {'file': 'todo.js'} 
20:39:22 响应
 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:39:23 完整请求
20:39:23 请求结束
20:39:23 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:23 path and query /api/todo/all {} 
20:39:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488975727,
    "id": 5,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975727
  },
  {
    "ct": 1488975855,
    "id": 6,
    "completed": false,
    "title": "hello",
    "ut": 1488975855
  },
  {
    "ct": 1488976012,
    "id": 7,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976012
  },
  {
    "ct": 1488976263,
    "id": 8,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976263
  }
]
20:39:44 完整请求
20:39:44 请求结束
20:39:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:44 path and query /todo/index {} 
20:39:44 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:39:44 完整请求
20:39:44 请求结束
20:39:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:44 path and query /static {'file': 'gua.js'} 
20:39:44 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:39:44 完整请求
20:39:44 请求结束
20:39:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:44 path and query /static {'file': 'todo.js'} 
20:39:44 响应
 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:39:44 完整请求
20:39:44 请求结束
20:39:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:44 path and query /api/todo/all {} 
20:39:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975133,
    "id": 3,
    "completed": false,
    "title": "吃瓜",
    "ut": 1488975133
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488976263,
    "id": 8,
    "completed": false,
    "title": "hello瓜",
    "ut": 1488976263
  }
]
20:39:58 完整请求
20:39:58 请求结束
20:39:58 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:39:58 path and query /api/todo/delete {'id': '3'} 
20:39:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488975133,
  "id": 3,
  "completed": false,
  "title": "吃瓜",
  "ut": 1488975133
}
20:41:06 完整请求
20:41:06 请求结束
20:41:06 完整请求
20:41:06 请求结束
20:41:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:41:06 path and query /api/todo/delete {'id': '8'} 
20:41:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488976263,
  "id": 8,
  "completed": false,
  "title": "hello瓜",
  "ut": 1488976263
}
20:43:55 完整请求
20:43:55 请求结束
20:43:56 完整请求
20:43:56 请求结束
20:43:56 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:43:56 path and query /todo/index {} 
20:43:56 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:43:56 完整请求
20:43:56 请求结束
20:43:56 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:43:56 path and query /static {'file': 'gua.js'} 
20:43:56 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:43:56 完整请求
20:43:56 请求结束
20:43:56 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:43:56 path and query /static {'file': 'todo.js'} 
20:43:56 响应
 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ct = todo.ct
    var ut = todo.ut
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ct}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:43:56 完整请求
20:43:56 请求结束
20:43:56 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:43:56 path and query /api/todo/all {} 
20:43:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  }
]
20:44:43 完整请求
20:44:43 请求结束
20:44:43 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:44:43 path and query /api/todo/add {} {"title":"123"}
20:44:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488977083,
  "id": 5,
  "completed": false,
  "title": "123",
  "ut": 1488977083
}
20:45:10 完整请求
20:45:10 请求结束
20:46:12 完整请求
20:46:12 请求结束
20:46:12 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:46:12 path and query /todo/index {} 
20:46:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:46:12 完整请求
20:46:12 请求结束
20:46:12 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:46:12 path and query /static {'file': 'gua.js'} 
20:46:12 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:46:12 完整请求
20:46:12 请求结束
20:46:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:46:13 path and query /static {'file': 'todo.js'} 
20:46:13 响应
 HTTP/1.1 200 OK

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ct = todo.ct
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
//    var ut = todo.ut
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ct}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:46:13 完整请求
20:46:13 请求结束
20:46:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:46:13 path and query /api/todo/all {} 
20:46:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  }
]
20:47:19 完整请求
20:47:19 请求结束
20:47:19 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:19 path and query /todo/index {} 
20:47:19 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:47:19 完整请求
20:47:19 请求结束
20:47:20 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:20 path and query /static {'file': 'gua.js'} 
20:47:20 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:47:20 完整请求
20:47:20 请求结束
20:47:20 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:20 path and query /static {'file': 'todo.js'} 
20:47:20 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var t = timeString(todo.ut)
//    var ut = todo.ut
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ct}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:47:20 完整请求
20:47:20 请求结束
20:47:20 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:20 path and query /api/todo/all {} 
20:47:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  }
]
20:47:38 完整请求
20:47:38 请求结束
20:47:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:38 path and query /todo/index {} 
20:47:38 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:47:38 完整请求
20:47:38 请求结束
20:47:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:38 path and query /static {'file': 'gua.js'} 
20:47:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:47:38 完整请求
20:47:38 请求结束
20:47:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:38 path and query /static {'file': 'todo.js'} 
20:47:38 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
//    var ut = todo.ut
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:47:38 完整请求
20:47:38 请求结束
20:47:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:38 path and query /api/todo/all {} 
20:47:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488959077,
    "id": 2,
    "completed": false,
    "title": "瓜",
    "ut": 1488959077
  },
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  }
]
20:47:42 完整请求
20:47:42 请求结束
20:47:42 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:42 path and query /api/todo/delete {'id': '2'} 
20:47:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488959077,
  "id": 2,
  "completed": false,
  "title": "瓜",
  "ut": 1488959077
}
20:47:44 完整请求
20:47:44 请求结束
20:47:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:44 path and query /api/todo/add {} 
20:47:49 完整请求
20:47:49 请求结束
20:47:49 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:49 path and query /api/todo/add {} {"title":"123"}
20:47:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488977269,
  "id": 6,
  "completed": false,
  "title": "123",
  "ut": 1488977269
}
20:47:49 完整请求
20:47:49 请求结束
20:47:49 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:49 path and query /api/todo/add {} {"title":"123"}
20:47:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488977269,
  "id": 7,
  "completed": false,
  "title": "123",
  "ut": 1488977269
}
20:47:53 完整请求
20:47:53 请求结束
20:47:53 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:47:53 path and query /api/todo/add {} {"title":"123asd"}
20:47:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ct": 1488977273,
  "id": 8,
  "completed": false,
  "title": "123asd",
  "ut": 1488977273
}
20:48:51 完整请求
20:48:51 请求结束
20:48:51 完整请求
20:48:51 请求结束
20:48:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:48:51 path and query /todo/index {} 
20:48:51 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:48:51 完整请求
20:48:51 请求结束
20:48:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:48:51 path and query /static {'file': 'gua.js'} 
20:48:51 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:48:52 完整请求
20:48:52 请求结束
20:48:52 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:48:52 path and query /static {'file': 'todo.js'} 
20:48:52 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }

//        var input = e('#id-input-todo')
//        var title = input.value
//        log('click add', title)
//        var form = {
//            'title': title,
//        }
//        apiTodoAdd(form, function(r) {
//            // 收到返回的数据, 插入到页面中
//            var todo = JSON.parse(r)
//            insertTodo(todo)
//        })
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:48:52 完整请求
20:48:52 请求结束
20:48:52 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:48:52 path and query /api/todo/all {} 
20:48:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  },
  {
    "ct": 1488977269,
    "id": 6,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977269,
    "id": 7,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977273,
    "id": 8,
    "completed": false,
    "title": "123asd",
    "ut": 1488977273
  }
]
20:51:34 完整请求
20:51:34 请求结束
20:51:35 完整请求
20:51:35 请求结束
20:51:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:35 path and query /todo/index {} 
20:51:35 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:51:35 完整请求
20:51:35 请求结束
20:51:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:35 path and query /static {'file': 'gua.js'} 
20:51:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:51:35 完整请求
20:51:35 请求结束
20:51:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:35 path and query /static {'file': 'todo.js'} 
20:51:35 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <input class="todo-edit-input">
        <button class='todo-update'>更新</button>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:51:35 完整请求
20:51:35 请求结束
20:51:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:35 path and query /api/todo/all {} 
20:51:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  },
  {
    "ct": 1488977269,
    "id": 6,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977269,
    "id": 7,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977273,
    "id": 8,
    "completed": false,
    "title": "123asd",
    "ut": 1488977273
  }
]
20:51:49 完整请求
20:51:49 请求结束
20:51:49 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:49 path and query /todo/index {} 
20:51:49 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:51:49 完整请求
20:51:49 请求结束
20:51:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:50 path and query /static {'file': 'gua.js'} 
20:51:50 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:51:50 完整请求
20:51:50 请求结束
20:51:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:50 path and query /static {'file': 'todo.js'} 
20:51:50 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <input class="todo-edit-input">
        <button class='todo-update'>更新</button>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:51:50 完整请求
20:51:50 请求结束
20:51:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:51:50 path and query /api/todo/all {} 
20:51:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  },
  {
    "ct": 1488977269,
    "id": 6,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977269,
    "id": 7,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977273,
    "id": 8,
    "completed": false,
    "title": "123asd",
    "ut": 1488977273
  }
]
20:56:53 完整请求
20:56:53 请求结束
20:56:53 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:56:53 path and query /todo/index {} 
20:56:53 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:56:53 完整请求
20:56:53 请求结束
20:56:53 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:56:54 path and query /static {'file': 'gua.js'} 
20:56:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:56:54 完整请求
20:56:54 请求结束
20:56:54 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:56:54 path and query /static {'file': 'todo.js'} 
20:56:54 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id
                'title': title,
            }
            apiTodoUpdate(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:57:06 完整请求
20:57:06 请求结束
20:57:06 完整请求
20:57:06 请求结束
20:57:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:57:06 path and query /todo/index {} 
20:57:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:57:06 完整请求
20:57:06 请求结束
20:57:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:57:06 path and query /static {'file': 'gua.js'} 
20:57:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
20:57:07 完整请求
20:57:07 请求结束
20:57:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:57:07 path and query /static {'file': 'todo.js'} 
20:57:07 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:57:07 完整请求
20:57:07 请求结束
20:57:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:57:07 path and query /api/todo/all {} 
20:57:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ct": 1488975265,
    "id": 4,
    "completed": false,
    "title": "吃饭",
    "ut": 1488975265
  },
  {
    "ct": 1488977083,
    "id": 5,
    "completed": false,
    "title": "123",
    "ut": 1488977083
  },
  {
    "ct": 1488977269,
    "id": 6,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977269,
    "id": 7,
    "completed": false,
    "title": "123",
    "ut": 1488977269
  },
  {
    "ct": 1488977273,
    "id": 8,
    "completed": false,
    "title": "123asd",
    "ut": 1488977273
  }
]
20:59:38 完整请求
20:59:38 请求结束
20:59:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:38 path and query /todo/index {} 
20:59:38 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
20:59:38 完整请求
20:59:38 请求结束
20:59:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:38 path and query /static {'file': 'gua.js'} 
20:59:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}

20:59:38 完整请求
20:59:38 请求结束
20:59:38 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:39 path and query /static {'file': 'todo.js'} 
20:59:39 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
20:59:39 完整请求
20:59:39 请求结束
20:59:39 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:39 path and query /api/todo/all {} 
20:59:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488975265,
    "id": 4,
    "ct": 1488975265,
    "title": "吃饭",
    "completed": false
  },
  {
    "ut": 1488977083,
    "id": 5,
    "ct": 1488977083,
    "title": "123",
    "completed": false
  },
  {
    "ut": 1488977269,
    "id": 6,
    "ct": 1488977269,
    "title": "123",
    "completed": false
  },
  {
    "ut": 1488977269,
    "id": 7,
    "ct": 1488977269,
    "title": "123",
    "completed": false
  },
  {
    "ut": 1488977273,
    "id": 8,
    "ct": 1488977273,
    "title": "123asd",
    "completed": false
  }
]
20:59:41 完整请求
20:59:42 请求结束
20:59:42 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:42 path and query /api/todo/delete {'id': '5'} 
20:59:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977083,
  "id": 5,
  "ct": 1488977083,
  "title": "123",
  "completed": false
}
20:59:42 完整请求
20:59:42 请求结束
20:59:42 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:42 path and query /api/todo/delete {'id': '6'} 
20:59:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977269,
  "id": 6,
  "ct": 1488977269,
  "title": "123",
  "completed": false
}
20:59:43 完整请求
20:59:43 请求结束
20:59:43 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:43 path and query /api/todo/delete {'id': '8'} 
20:59:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977273,
  "id": 8,
  "ct": 1488977273,
  "title": "123asd",
  "completed": false
}
20:59:43 完整请求
20:59:43 请求结束
20:59:43 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:43 path and query /api/todo/delete {'id': '7'} 
20:59:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977269,
  "id": 7,
  "ct": 1488977269,
  "title": "123",
  "completed": false
}
20:59:53 完整请求
20:59:54 请求结束
20:59:54 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:54 path and query /api/todo/update {} {"id":"4","title":"吃瓜"}
20:59:54 kwargs,  {'id': 4} <class 'dict'>
20:59:54 debug 0
20:59:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977994,
  "id": 4,
  "ct": 1488975265,
  "title": "吃瓜",
  "completed": false
}
21:05:10 完整请求
21:05:10 请求结束
21:05:10 完整请求
21:05:10 请求结束
21:05:10 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:10 path and query /todo/index {} 
21:05:10 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:05:11 完整请求
21:05:11 请求结束
21:05:11 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:11 path and query /static {'file': 'gua.js'} 
21:05:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}

21:05:11 完整请求
21:05:11 请求结束
21:05:11 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:11 path and query /static {'file': 'todo.js'} 
21:05:11 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:05:11 完整请求
21:05:11 请求结束
21:05:11 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:11 path and query /api/todo/all {} 
21:05:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488977994,
    "id": 4,
    "ct": 1488975265,
    "title": "吃瓜",
    "completed": false
  }
]
21:05:18 完整请求
21:05:18 请求结束
21:05:18 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:18 path and query /api/todo/update {} {"id":"4","title":"hello"}
21:05:18 kwargs,  {'id': 4} <class 'dict'>
21:05:18 debug 0
21:05:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488978318,
  "id": 4,
  "ct": 1488975265,
  "title": "hello",
  "completed": false
}
21:05:20 完整请求
21:05:20 请求结束
21:05:20 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:21 path and query /todo/index {} 
21:05:21 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:05:21 完整请求
21:05:21 完整请求
21:05:21 请求结束
21:05:21 请求结束
21:05:21 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:21 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:21 path and query /static {'file': 'todo.js'} 
21:05:21 path and query /static {'file': 'gua.js'} 
21:05:21 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:05:21 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}

21:05:21 完整请求
21:05:21 请求结束
21:05:21 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:05:21 path and query /api/todo/all {} 
21:05:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978318,
    "id": 4,
    "ct": 1488975265,
    "title": "hello",
    "completed": false
  }
]
21:07:45 完整请求
21:07:45 请求结束
21:07:46 完整请求
21:07:46 请求结束
21:07:46 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:07:46 path and query /todo/index {} 
21:07:46 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:07:46 完整请求
21:07:46 请求结束
21:07:46 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:07:46 path and query /static {'file': 'gua.js'} 
21:07:46 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:07:46 完整请求
21:07:46 请求结束
21:07:46 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:07:46 path and query /static {'file': 'todo.js'} 
21:07:46 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span>${title}</span>
            <time>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:07:46 完整请求
21:07:46 请求结束
21:07:46 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:07:46 path and query /api/todo/all {} 
21:07:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978318,
    "id": 4,
    "ct": 1488975265,
    "title": "hello",
    "completed": false
  }
]
21:10:33 完整请求
21:10:33 请求结束
21:10:33 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:33 path and query /todo/index {} 
21:10:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:10:34 完整请求
21:10:34 请求结束
21:10:34 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:34 path and query /static {'file': 'gua.js'} 
21:10:34 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:10:34 完整请求
21:10:34 请求结束
21:10:34 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:34 path and query /static {'file': 'todo.js'} 
21:10:34 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:10:34 完整请求
21:10:34 请求结束
21:10:34 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:34 path and query /api/todo/all {} 
21:10:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978318,
    "id": 4,
    "ct": 1488975265,
    "title": "hello",
    "completed": false
  }
]
21:10:39 完整请求
21:10:39 请求结束
21:10:39 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:39 path and query /api/todo/update {} {"id":"4","title":"gua"}
21:10:39 kwargs,  {'id': 4} <class 'dict'>
21:10:39 debug 0
21:10:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488978639,
  "id": 4,
  "ct": 1488975265,
  "title": "gua",
  "completed": false
}
21:10:44 完整请求
21:10:44 请求结束
21:10:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:44 path and query /todo/index {} 
21:10:44 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:10:44 完整请求
21:10:44 完整请求
21:10:44 请求结束
21:10:44 请求结束
21:10:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:44 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:44 path and query /static {'file': 'todo.js'} 
21:10:44 path and query /static {'file': 'gua.js'} 
21:10:45 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:10:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:10:45 完整请求
21:10:45 请求结束
21:10:45 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:45 path and query /api/todo/all {} 
21:10:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978639,
    "id": 4,
    "ct": 1488975265,
    "title": "gua",
    "completed": false
  }
]
21:10:50 完整请求
21:10:50 请求结束
21:10:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:10:50 path and query /api/todo/update {} 
21:11:09 完整请求
21:11:09 请求结束
21:11:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:11:09 path and query /api/todo/update {} {"id":"4","title":"瓜"}
21:11:09 kwargs,  {'id': 4} <class 'dict'>
21:11:09 debug 0
21:11:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488978669,
  "id": 4,
  "ct": 1488975265,
  "title": "瓜",
  "completed": false
}
21:11:09 完整请求
21:11:09 请求结束
21:11:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:11:09 path and query /api/todo/update {} {"id":"4","title":"瓜"}
21:11:09 kwargs,  {'id': 4} <class 'dict'>
21:11:09 debug 0
21:11:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488978669,
  "id": 4,
  "ct": 1488975265,
  "title": "瓜",
  "completed": false
}
21:17:29 完整请求
21:17:29 请求结束
21:17:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:29 path and query /todo/index {} 
21:17:29 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:17:29 完整请求
21:17:29 请求结束
21:17:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:29 path and query /static {'file': 'gua.js'} 
21:17:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:17:30 完整请求
21:17:30 请求结束
21:17:30 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:30 path and query /static {'file': 'todo.js'} 
21:17:30 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:17:30 完整请求
21:17:30 请求结束
21:17:30 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:30 path and query /api/todo/all {} 
21:17:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978669,
    "id": 4,
    "ct": 1488975265,
    "title": "瓜",
    "completed": false
  }
]
21:17:34 完整请求
21:17:34 请求结束
21:17:34 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:35 path and query /weibo/index {} 
21:17:35 kwargs,  {'id': -1} <class 'dict'>
21:17:35 响应
 HTTP/1.1 302 OK
Location: /login
Content-Type: text/html


21:17:35 完整请求
21:17:35 请求结束
21:17:35 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:35 path and query /login {} 
21:17:35 login, cookies {'Pycharm-df207d35': '600adc10-1f5d-46ff-b99f-861b091847e7'}
21:17:35 响应
 HTTP/1.1 200 VERY OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>注册登录页面</title>
</head>
<body>
    <h1>登录</h1>
    <h2>你好 </h2>
    <form action="/login" method="post">
        <input type="text" name="username" placeholder="请输入用户名">
        <br>
        <input type="text" name="password" placeholder="请输入密码">
        <br>
        <button type="submit">登录</button>
    </form>
    <h3></h3>
</body>
</html>
21:17:57 完整请求
21:17:57 请求结束
21:17:57 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:57 path and query /weibo/index {} 
21:17:57 完整请求
21:17:57 请求结束
21:17:57 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:17:57 path and query /weibo/index {} 
21:18:06 完整请求
21:18:06 完整请求
21:18:06 完整请求
21:18:06 完整请求
21:18:06 请求结束
21:18:06 请求结束
21:18:06 请求结束
21:18:06 请求结束
21:18:06 完整请求
21:18:06 请求结束
21:18:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:06 path and query /todo/index {} 
21:18:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:18:06 完整请求
21:18:06 请求结束
21:18:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:06 path and query /static {'file': 'gua.js'} 
21:18:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:18:06 完整请求
21:18:06 请求结束
21:18:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:06 path and query /static {'file': 'todo.js'} 
21:18:06 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:18:07 完整请求
21:18:07 请求结束
21:18:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:07 path and query /api/todo/all {} 
21:18:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "completed": false,
    "id": 4,
    "title": "瓜",
    "ct": 1488975265,
    "ut": 1488978669
  }
]
21:18:09 完整请求
21:18:09 完整请求
21:18:09 请求结束
21:18:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:09 请求结束
21:18:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:09 path and query /weibo/index {} 
21:18:09 path and query /weibo/index {} 
21:18:29 完整请求
21:18:29 请求结束
21:18:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:29 path and query /weibo/index {} 
21:18:50 完整请求
21:18:50 请求结束
21:18:50 完整请求
21:18:50 请求结束
21:18:50 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:50 path and query /todo/index {} 
21:18:50 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
21:18:51 完整请求
21:18:51 请求结束
21:18:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:51 path and query /static {'file': 'gua.js'} 
21:18:51 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:18:51 完整请求
21:18:51 请求结束
21:18:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:51 path and query /static {'file': 'todo.js'} 
21:18:51 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
21:18:51 完整请求
21:18:51 请求结束
21:18:51 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:51 path and query /api/todo/all {} 
21:18:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "ut": 1488978669,
    "ct": 1488975265,
    "id": 4,
    "title": "瓜",
    "completed": false
  }
]
21:18:54 完整请求
21:18:54 请求结束
21:18:54 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:54 path and query /weibo/index {} 
21:18:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list">
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:18:54 完整请求
21:18:54 完整请求
21:18:54 请求结束
21:18:54 请求结束
21:18:55 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:55 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:55 path and query /static {'file': 'gua.js'} 
21:18:55 path and query /static {'file': 'weibo.js'} 
21:18:55 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

21:18:55 完整请求
21:18:55 请求结束
21:18:55 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:55 path and query /static {'file': 'weibo.js'} 
21:18:55 完整请求
21:18:55 请求结束
21:18:55 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:18:55 path and query /static {'file': 'weibo.js'} 
21:40:12 完整请求
21:40:12 请求结束
21:40:12 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:12 path and query /weibo/index {} 
21:40:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:40:12 完整请求
21:40:12 请求结束
21:40:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:13 path and query /static {'file': 'gua.js'} 
21:40:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:40:13 完整请求
21:40:13 请求结束
21:40:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:13 path and query /static {'file': 'weibo.js'} 
21:40:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.Weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:40:13 完整请求
21:40:13 请求结束
21:40:13 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:14 path and query /weibo/index {} 
21:40:14 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:40:14 完整请求
21:40:14 完整请求
21:40:14 请求结束
21:40:14 请求结束
21:40:14 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:14 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:14 path and query /static {'file': 'weibo.js'} 
21:40:14 path and query /static {'file': 'gua.js'} 
21:40:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.Weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:40:14 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:40:14 完整请求
21:40:14 请求结束
21:40:14 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:14 path and query /api/weibo/all {} 
21:40:15 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
21:40:28 完整请求
21:40:28 请求结束
21:40:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:29 path and query /weibo/index {} 
21:40:29 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:40:29 完整请求
21:40:29 请求结束
21:40:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:29 path and query /static {'file': 'gua.js'} 
21:40:29 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:40:29 完整请求
21:40:29 请求结束
21:40:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:29 path and query /static {'file': 'weibo.js'} 
21:40:29 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.Weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:40:29 完整请求
21:40:29 请求结束
21:40:29 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:40:29 path and query /api/weibo/all {} 
21:40:29 kwargs,  {'weibo_id': 1} <class 'dict'>
21:40:29 kwargs,  {'weibo_id': 2} <class 'dict'>
21:40:29 kwargs,  {'weibo_id': 3} <class 'dict'>
21:40:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "user_id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "id": 1,
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "content": "lbvu is right",
        "id": 2,
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "content": "你好",
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "说得好",
        "id": 7,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "content": "hahaha",
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
21:41:09 完整请求
21:41:09 请求结束
21:41:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:41:09 path and query /weibo/index {} 
21:41:09 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:41:09 完整请求
21:41:09 请求结束
21:41:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:41:09 path and query /static {'file': 'gua.js'} 
21:41:09 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:41:09 完整请求
21:41:09 请求结束
21:41:09 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:41:10 path and query /static {'file': 'weibo.js'} 
21:41:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:41:10 完整请求
21:41:10 请求结束
21:41:10 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:41:10 path and query /api/weibo/all {} 
21:41:10 kwargs,  {'weibo_id': 1} <class 'dict'>
21:41:10 kwargs,  {'weibo_id': 2} <class 'dict'>
21:41:10 kwargs,  {'weibo_id': 3} <class 'dict'>
21:41:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "user_id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "id": 1,
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "content": "lbvu is right",
        "id": 2,
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "content": "你好",
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "说得好",
        "id": 7,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "content": "hahaha",
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
21:42:06 完整请求
21:42:06 请求结束
21:42:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:42:06 path and query /weibo/index {} 
21:42:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
21:42:06 完整请求
21:42:06 请求结束
21:42:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:42:06 path and query /static {'file': 'gua.js'} 
21:42:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

21:42:06 完整请求
21:42:06 请求结束
21:42:06 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:42:06 path and query /static {'file': 'weibo.js'} 
21:42:07 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

21:42:07 完整请求
21:42:07 请求结束
21:42:07 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
21:42:07 path and query /api/weibo/all {} 
21:42:07 kwargs,  {'weibo_id': 1} <class 'dict'>
21:42:07 kwargs,  {'weibo_id': 2} <class 'dict'>
21:42:07 kwargs,  {'weibo_id': 3} <class 'dict'>
21:42:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "user_id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "id": 1,
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "content": "lbvu is right",
        "id": 2,
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "content": "你好",
    "id": 2,
    "user_id": 1,
    "comments": [
      {
        "content": "hello",
        "id": 3,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "123",
        "id": 4,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "asdf",
        "id": 5,
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "content": "说得好",
        "id": 7,
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "content": "说得好",
        "id": 8,
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "content": "hahaha",
    "id": 3,
    "user_id": 1,
    "comments": [
      {
        "content": "123",
        "id": 6,
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
21:44:32 完整请求
21:44:32 请求结束
14:43:24 完整请求
14:43:24 请求结束
14:43:54 完整请求
14:43:54 请求结束
14:43:54 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:44:11 完整请求
14:44:11 请求结束
14:44:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:46:02 完整请求
14:46:02 请求结束
14:46:02 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:46:02 path and query / {} 
14:46:02 响应
 HTTP/1.1 302 OK
Location: /todo/index
Content-Type: text/html


14:46:02 完整请求
14:46:02 请求结束
14:46:02 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:46:02 path and query /todo/index {} 
14:46:02 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
14:46:02 完整请求
14:46:02 完整请求
14:46:02 请求结束
14:46:02 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:46:02 path and query /static {'file': 'todo.js'} 
14:46:02 请求结束
14:46:02 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:46:02 path and query /static {'file': 'gua.js'} 
14:46:02 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

14:46:02 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
14:46:02 完整请求
14:46:02 请求结束
14:46:02 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:46:02 path and query /api/todo/all {} 
14:46:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "completed": false,
    "ut": 1488978669,
    "ct": 1488975265,
    "title": "瓜",
    "id": 4
  }
]
14:46:11 完整请求
14:46:11 请求结束
14:46:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:46:11 path and query /api/todo/add {} {"title":"1231"}
14:46:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "completed": false,
  "ut": 1545979571,
  "ct": 1545979571,
  "title": "1231",
  "id": 5
}
14:46:17 完整请求
14:46:17 请求结束
14:46:17 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:46:17 path and query /api/todo/update {} {"id":"5","title":"fdsa"}
14:46:17 kwargs,  {'id': 5} <class 'dict'>
14:46:17 debug 1
14:46:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "completed": false,
  "ut": 1545979577,
  "ct": 1545979571,
  "title": "fdsa",
  "id": 5
}
14:46:19 完整请求
14:46:19 请求结束
14:46:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:46:19 path and query /api/todo/delete {'id': '5'} 
14:46:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "completed": false,
  "ut": 1545979577,
  "ct": 1545979571,
  "title": "fdsa",
  "id": 5
}
14:46:21 完整请求
14:46:21 请求结束
14:46:21 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:46:21 path and query /api/todo/add {} {"title":"1231"}
14:46:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "completed": false,
  "ut": 1545979581,
  "ct": 1545979581,
  "title": "1231",
  "id": 5
}
14:47:28 完整请求
14:47:28 请求结束
14:47:28 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:47:28 path and query /weibo/index {} 
14:47:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:47:28 完整请求
14:47:28 请求结束
14:47:28 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:47:28 path and query /static {'file': 'gua.js'} 
14:47:28 完整请求
14:47:28 请求结束
14:47:28 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:47:28 path and query /static {'file': 'weibo.js'} 
14:47:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:47:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

14:47:28 完整请求
14:47:28 请求结束
14:47:28 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:47:28 path and query /api/weibo/all {} 
14:47:28 kwargs,  {'weibo_id': 1} <class 'dict'>
14:47:28 kwargs,  {'weibo_id': 2} <class 'dict'>
14:47:28 kwargs,  {'weibo_id': 3} <class 'dict'>
14:47:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 2,
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "user_id": 1,
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello",
        "id": 3
      },
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "123",
        "id": 4
      },
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf",
        "id": 5
      },
      {
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 1,
        "weibo_id": 3,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  }
]
14:55:33 完整请求
14:55:33 请求结束
14:55:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:55:33 path and query /weibo/index {} 
14:55:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:55:33 完整请求
14:55:33 请求结束
14:55:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:55:33 path and query /static {'file': 'gua.js'} 
14:55:33 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

14:55:33 完整请求
14:55:33 请求结束
14:55:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:55:33 path and query /static {'file': 'weibo.js'} 
14:55:33 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:55:33 完整请求
14:55:33 请求结束
14:55:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:55:33 path and query /api/weibo/all {} 
14:55:33 kwargs,  {'weibo_id': 1} <class 'dict'>
14:55:33 kwargs,  {'weibo_id': 2} <class 'dict'>
14:55:33 kwargs,  {'weibo_id': 3} <class 'dict'>
14:55:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 2,
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "user_id": 1,
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello",
        "id": 3
      },
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "123",
        "id": 4
      },
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf",
        "id": 5
      },
      {
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 1,
        "weibo_id": 3,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  }
]
14:55:36 完整请求
14:55:36 请求结束
14:55:36 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:55:36 path and query /weibo/index {} 
14:55:36 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:55:36 完整请求
14:55:36 请求结束
14:55:36 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:55:36 path and query /static {'file': 'gua.js'} 
14:55:36 完整请求
14:55:36 请求结束
14:55:36 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:55:36 path and query /static {'file': 'weibo.js'} 
14:55:36 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

14:55:36 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:55:36 完整请求
14:55:36 请求结束
14:55:36 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:55:36 path and query /api/weibo/all {} 
14:55:36 kwargs,  {'weibo_id': 1} <class 'dict'>
14:55:36 kwargs,  {'weibo_id': 2} <class 'dict'>
14:55:36 kwargs,  {'weibo_id': 3} <class 'dict'>
14:55:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 2,
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1
      },
      {
        "user_id": 1,
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2
      }
    ],
    "content": "hello tweet",
    "id": 1
  },
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "hello",
        "id": 3
      },
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "123",
        "id": 4
      },
      {
        "user_id": 1,
        "weibo_id": 2,
        "content": "asdf",
        "id": 5
      },
      {
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好",
        "id": 7
      },
      {
        "user_id": 2,
        "weibo_id": 2,
        "content": "说得好",
        "id": 8
      }
    ],
    "content": "你好",
    "id": 2
  },
  {
    "user_id": 1,
    "comments": [
      {
        "user_id": 1,
        "weibo_id": 3,
        "content": "123",
        "id": 6
      }
    ],
    "content": "hahaha",
    "id": 3
  }
]
14:56:43 完整请求
14:56:43 请求结束
14:56:43 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:56:43 path and query /weibo/index {} 
14:56:43 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
14:56:43 完整请求
14:56:43 请求结束
14:56:43 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:56:43 path and query /static {'file': 'gua.js'} 
14:56:43 完整请求
14:56:43 请求结束
14:56:43 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

14:56:43 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:56:43 path and query /static {'file': 'weibo.js'} 
14:56:43 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//    bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

14:56:43 完整请求
14:56:43 请求结束
14:56:43 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
14:56:43 path and query /api/weibo/all {} 
14:56:43 kwargs,  {'weibo_id': 1} <class 'dict'>
14:56:43 kwargs,  {'weibo_id': 2} <class 'dict'>
14:56:43 kwargs,  {'weibo_id': 3} <class 'dict'>
14:56:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "user_id": 1,
    "id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "id": 1,
        "weibo_id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "id": 2,
        "weibo_id": 1
      }
    ]
  },
  {
    "content": "你好",
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "id": 3,
        "weibo_id": 2
      },
      {
        "content": "123",
        "user_id": 1,
        "id": 4,
        "weibo_id": 2
      },
      {
        "content": "asdf",
        "user_id": 1,
        "id": 5,
        "weibo_id": 2
      },
      {
        "content": "说得好",
        "user_id": 2,
        "id": 7,
        "weibo_id": 2
      },
      {
        "content": "说得好",
        "user_id": 2,
        "id": 8,
        "weibo_id": 2
      }
    ]
  },
  {
    "content": "hahaha",
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "id": 6,
        "weibo_id": 3
      }
    ]
  }
]
15:00:52 完整请求
15:00:52 请求结束
15:00:52 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:00:52 path and query /weibo/index {} 
15:00:52 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:00:53 完整请求
15:00:53 请求结束
15:00:53 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:00:53 path and query /static {'file': 'gua.js'} 
15:00:53 完整请求
15:00:53 请求结束
15:00:53 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:00:53 path and query /static {'file': 'weibo.js'} 
15:00:53 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:00:53 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
        bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:01:57 完整请求
15:01:57 请求结束
15:01:57 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:01:57 path and query /weibo/index {} 
15:01:57 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:01:57 完整请求
15:01:57 请求结束
15:01:57 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:01:57 path and query /static {'file': 'gua.js'} 
15:01:57 完整请求
15:01:57 请求结束
15:01:57 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:01:57 path and query /static {'file': 'weibo.js'} 
15:01:57 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:01:57 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
        bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:04:05 完整请求
15:04:05 请求结束
15:04:05 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:04:05 path and query /weibo/index {} 
15:04:05 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:04:06 完整请求
15:04:06 请求结束
15:04:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:04:06 path and query /static {'file': 'gua.js'} 
15:04:06 完整请求
15:04:06 请求结束
15:04:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:04:06 path and query /static {'file': 'weibo.js'} 
15:04:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:04:06 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//        bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:04:06 完整请求
15:04:06 请求结束
15:04:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:04:06 path and query /api/weibo/all {} 
15:04:06 kwargs,  {'weibo_id': 1} <class 'dict'>
15:04:06 kwargs,  {'weibo_id': 2} <class 'dict'>
15:04:06 kwargs,  {'weibo_id': 3} <class 'dict'>
15:04:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ],
    "content": "hello tweet",
    "user_id": 1
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ],
    "content": "你好",
    "user_id": 1
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ],
    "content": "hahaha",
    "user_id": 1
  }
]
15:07:09 完整请求
15:07:09 请求结束
15:07:09 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:07:09 path and query /weibo/index {} 
15:07:09 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:07:09 完整请求
15:07:09 请求结束
15:07:09 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:07:09 path and query /static {'file': 'gua.js'} 
15:07:09 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:07:09 完整请求
15:07:09 请求结束
15:07:09 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:07:09 path and query /static {'file': 'weibo.js'} 
15:07:09 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
//        bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:07:09 完整请求
15:07:09 请求结束
15:07:09 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:07:09 path and query /api/weibo/all {} 
15:07:09 kwargs,  {'weibo_id': 1} <class 'dict'>
15:07:09 kwargs,  {'weibo_id': 2} <class 'dict'>
15:07:09 kwargs,  {'weibo_id': 3} <class 'dict'>
15:07:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "user_id": 2,
        "content": "楼主说得对",
        "weibo_id": 1,
        "id": 1
      },
      {
        "user_id": 1,
        "content": "lbvu is right",
        "weibo_id": 1,
        "id": 2
      }
    ],
    "user_id": 1,
    "content": "hello tweet",
    "id": 1
  },
  {
    "comments": [
      {
        "user_id": 1,
        "content": "hello",
        "weibo_id": 2,
        "id": 3
      },
      {
        "user_id": 1,
        "content": "123",
        "weibo_id": 2,
        "id": 4
      },
      {
        "user_id": 1,
        "content": "asdf",
        "weibo_id": 2,
        "id": 5
      },
      {
        "user_id": 2,
        "content": "说得好",
        "weibo_id": 2,
        "id": 7
      },
      {
        "user_id": 2,
        "content": "说得好",
        "weibo_id": 2,
        "id": 8
      }
    ],
    "user_id": 1,
    "content": "你好",
    "id": 2
  },
  {
    "comments": [
      {
        "user_id": 1,
        "content": "123",
        "weibo_id": 3,
        "id": 6
      }
    ],
    "user_id": 1,
    "content": "hahaha",
    "id": 3
  }
]
15:08:18 完整请求
15:08:18 请求结束
15:08:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:08:18 path and query /weibo/index {} 
15:08:18 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:08:18 完整请求
15:08:18 请求结束
15:08:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:08:18 path and query /static {'file': 'gua.js'} 
15:08:18 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:08:18 完整请求
15:08:18 请求结束
15:08:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:08:18 path and query /static {'file': 'weibo.js'} 
15:08:18 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:08:18 完整请求
15:08:18 请求结束
15:08:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:08:18 path and query /api/weibo/all {} 
15:08:18 kwargs,  {'weibo_id': 1} <class 'dict'>
15:08:18 kwargs,  {'weibo_id': 2} <class 'dict'>
15:08:18 kwargs,  {'weibo_id': 3} <class 'dict'>
15:08:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  }
]
15:08:43 完整请求
15:08:43 请求结束
15:08:43 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:08:43 path and query /static {'file': 'weibo.js'} 
15:08:43 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-Weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:10:12 完整请求
15:10:12 请求结束
15:10:12 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:10:12 path and query /weibo/index {} 
15:10:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:10:12 完整请求
15:10:12 请求结束
15:10:12 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:10:12 path and query /static {'file': 'gua.js'} 
15:10:12 完整请求
15:10:12 请求结束
15:10:12 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:10:12 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:10:12 path and query /static {'file': 'weibo.js'} 
15:10:12 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:10:12 完整请求
15:10:12 请求结束
15:10:12 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:10:12 path and query /api/weibo/all {} 
15:10:12 kwargs,  {'weibo_id': 1} <class 'dict'>
15:10:12 kwargs,  {'weibo_id': 2} <class 'dict'>
15:10:12 kwargs,  {'weibo_id': 3} <class 'dict'>
15:10:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  }
]
15:10:12 完整请求
15:10:12 请求结束
15:10:12 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:10:12 path and query /static {'file': 'weibo.js'} 
15:10:12 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:10:16 完整请求
15:10:16 请求结束
15:10:16 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:10:16 path and query /api/weibo/add {} {"title":"dsafddf"}
15:10:16 kwargs,  {'weibo_id': 4} <class 'dict'>
15:10:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "comments": [],
  "content": ""
}
15:13:19 完整请求
15:13:19 请求结束
15:13:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:13:19 path and query /weibo/index {} 
15:13:19 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:13:19 完整请求
15:13:19 完整请求
15:13:19 请求结束
15:13:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:13:19 path and query /static {'file': 'weibo.js'} 
15:13:19 请求结束
15:13:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:13:19 path and query /static {'file': 'gua.js'} 
15:13:19 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:13:19 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:13:19 完整请求
15:13:19 请求结束
15:13:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:13:19 path and query /api/weibo/all {} 
15:13:19 kwargs,  {'weibo_id': 1} <class 'dict'>
15:13:19 kwargs,  {'weibo_id': 2} <class 'dict'>
15:13:19 kwargs,  {'weibo_id': 3} <class 'dict'>
15:13:19 kwargs,  {'weibo_id': 4} <class 'dict'>
15:13:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 4,
    "comments": [],
    "content": ""
  }
]
15:13:20 完整请求
15:13:20 请求结束
15:13:20 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:13:20 path and query /static {'file': 'weibo.js'} 
15:13:20 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:13:54 完整请求
15:13:54 请求结束
15:13:54 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:13:54 path and query /weibo/index {} 
15:13:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:13:54 完整请求
15:13:54 请求结束
15:13:54 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:13:54 path and query /static {'file': 'gua.js'} 
15:13:54 完整请求
15:13:54 请求结束
15:13:54 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:13:54 path and query /static {'file': 'weibo.js'} 
15:13:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:13:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:13:55 完整请求
15:13:55 请求结束
15:13:55 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:13:55 path and query /api/weibo/all {} 
15:13:55 kwargs,  {'weibo_id': 1} <class 'dict'>
15:13:55 kwargs,  {'weibo_id': 2} <class 'dict'>
15:13:55 kwargs,  {'weibo_id': 3} <class 'dict'>
15:13:55 kwargs,  {'weibo_id': 4} <class 'dict'>
15:13:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 4,
    "comments": [],
    "content": ""
  }
]
15:13:55 完整请求
15:13:55 请求结束
15:13:55 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:13:55 path and query /static {'file': 'weibo.js'} 
15:13:55 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:16:09 完整请求
15:16:09 请求结束
15:16:09 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:16:09 path and query /weibo/index {} 
15:16:09 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:16:09 完整请求
15:16:09 请求结束
15:16:09 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:16:09 path and query /static {'file': 'gua.js'} 
15:16:09 完整请求
15:16:09 请求结束
15:16:09 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:16:09 path and query /static {'file': 'weibo.js'} 
15:16:09 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:16:09 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)S
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:16:21 完整请求
15:16:21 请求结束
15:16:27 完整请求
15:16:28 请求结束
15:16:28 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:16:28 path and query /weibo/index {} 
15:16:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:16:28 完整请求
15:16:28 请求结束
15:16:28 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:16:28 path and query /static {'file': 'gua.js'} 
15:16:28 完整请求
15:16:28 请求结束
15:16:28 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:16:28 path and query /static {'file': 'weibo.js'} 
15:16:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:16:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:16:28 完整请求
15:16:28 请求结束
15:16:28 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:16:28 path and query /api/weibo/all {} 
15:16:28 kwargs,  {'weibo_id': 1} <class 'dict'>
15:16:28 kwargs,  {'weibo_id': 2} <class 'dict'>
15:16:28 kwargs,  {'weibo_id': 3} <class 'dict'>
15:16:28 kwargs,  {'weibo_id': 4} <class 'dict'>
15:16:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 4,
    "comments": [],
    "content": ""
  }
]
15:16:29 完整请求
15:16:29 请求结束
15:16:29 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:16:29 path and query /static {'file': 'weibo.js'} 
15:16:29 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:16:34 完整请求
15:16:34 请求结束
15:16:34 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:16:34 path and query /api/weibo/add {} {"title":"dsafddf"}
15:16:34 kwargs,  {'weibo_id': 5} <class 'dict'>
15:16:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "comments": [],
  "content": ""
}
15:28:44 完整请求
15:28:44 请求结束
15:28:44 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:28:44 path and query /weibo/index {} 
15:28:44 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:28:44 完整请求
15:28:44 请求结束
15:28:44 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:28:44 path and query /static {'file': 'gua.js'} 
15:28:44 完整请求
15:28:44 请求结束
15:28:44 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:28:44 path and query /static {'file': 'weibo.js'} 
15:28:44 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:28:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:28:45 完整请求
15:28:45 请求结束
15:28:45 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:28:45 path and query /api/weibo/all {} 
15:28:45 kwargs,  {'weibo_id': 1} <class 'dict'>
15:28:45 kwargs,  {'weibo_id': 2} <class 'dict'>
15:28:45 kwargs,  {'weibo_id': 3} <class 'dict'>
15:28:45 kwargs,  {'weibo_id': 4} <class 'dict'>
15:28:45 kwargs,  {'weibo_id': 5} <class 'dict'>
15:28:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 4,
    "comments": [],
    "content": ""
  },
  {
    "id": 5,
    "comments": [],
    "content": ""
  }
]
15:28:45 完整请求
15:28:45 请求结束
15:28:45 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:28:45 path and query /static {'file': 'weibo.js'} 
15:28:45 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:28:54 完整请求
15:28:54 请求结束
15:28:54 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:28:54 path and query /api/weibo/add {} {"title":"dsafddf"}
15:28:54 kwargs,  {'weibo_id': 6} <class 'dict'>
15:28:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "comments": [],
  "content": ""
}
15:33:55 完整请求
15:33:55 请求结束
15:33:55 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:33:55 path and query /api/weibo/add {} {"title":"dsafddf"}
15:33:59 完整请求
15:33:59 请求结束
15:33:59 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:33:59 path and query /weibo/index {} 
15:33:59 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:34:00 完整请求
15:34:00 请求结束
15:34:00 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:34:00 path and query /static {'file': 'gua.js'} 
15:34:00 完整请求
15:34:00 请求结束
15:34:00 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:34:00 path and query /static {'file': 'weibo.js'} 
15:34:00 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:34:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:34:00 完整请求
15:34:00 请求结束
15:34:00 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:34:00 path and query /api/weibo/all {} 
15:34:00 完整请求
15:34:00 完整请求
15:34:00 请求结束
15:34:00 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:34:00 path and query /api/weibo/all {} 
15:34:00 请求结束
15:34:00 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:34:00 path and query /static {'file': 'weibo.js'} 
15:34:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:34:00 完整请求
15:34:00 请求结束
15:34:00 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:34:00 path and query /api/weibo/all {} 
15:34:15 完整请求
15:34:15 请求结束
15:34:15 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:34:15 path and query /api/weibo/all {} 
15:35:16 完整请求
15:35:16 请求结束
15:35:16 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:16 path and query /weibo/index {} 
15:35:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:35:16 完整请求
15:35:16 请求结束
15:35:16 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:16 path and query /static {'file': 'gua.js'} 
15:35:16 完整请求
15:35:16 请求结束
15:35:16 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:16 path and query /static {'file': 'weibo.js'} 
15:35:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:35:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:35:17 完整请求
15:35:17 请求结束
15:35:17 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:17 path and query /api/weibo/all {} 
15:35:17 完整请求
15:35:17 完整请求
15:35:17 请求结束
15:35:17 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:17 path and query /api/weibo/all {} 
15:35:17 请求结束
15:35:17 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:17 path and query /static {'file': 'weibo.js'} 
15:35:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:35:17 完整请求
15:35:17 请求结束
15:35:17 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:17 path and query /api/weibo/all {} 
15:35:18 完整请求
15:35:18 请求结束
15:35:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:18 path and query /api/weibo/add {} {"title":"dsafddf"}
15:35:18 完整请求
15:35:18 请求结束
15:35:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:18 path and query /api/weibo/all {} 
15:35:18 完整请求
15:35:18 请求结束
15:35:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:18 path and query /api/weibo/all {} 
15:35:25 完整请求
15:35:25 请求结束
15:35:25 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:25 path and query /api/weibo/all {} 
15:35:56 完整请求
15:35:56 请求结束
15:35:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:56 path and query /weibo/index {} 
15:35:56 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:35:56 完整请求
15:35:56 请求结束
15:35:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:56 path and query /static {'file': 'gua.js'} 
15:35:56 完整请求
15:35:56 请求结束
15:35:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:56 path and query /static {'file': 'weibo.js'} 
15:35:56 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    #log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    #log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:35:56 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:35:57 完整请求
15:35:57 请求结束
15:35:57 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:35:57 path and query /static {'file': 'weibo.js'} 
15:35:57 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:36:15 完整请求
15:36:15 请求结束
15:36:32 完整请求
15:36:32 请求结束
15:36:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:36:32 path and query /weibo/index {} 
15:36:32 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:36:32 完整请求
15:36:32 请求结束
15:36:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:36:32 path and query /static {'file': 'gua.js'} 
15:36:32 完整请求
15:36:32 请求结束
15:36:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:36:32 path and query /static {'file': 'weibo.js'} 
15:36:32 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:36:32 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:36:33 完整请求
15:36:33 请求结束
15:36:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:36:33 path and query /api/weibo/all {} 
15:36:33 完整请求
15:36:33 完整请求
15:36:33 请求结束
15:36:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:36:33 path and query /static {'file': 'weibo.js'} 
15:36:33 请求结束
15:36:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:36:33 path and query /api/weibo/all {} 
15:36:33 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:36:33 完整请求
15:36:33 请求结束
15:36:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:36:33 path and query /api/weibo/all {} 
15:37:32 完整请求
15:37:32 请求结束
15:37:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:37:32 path and query /weibo/index {} 
15:37:32 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:37:33 完整请求
15:37:33 完整请求
15:37:33 请求结束
15:37:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:37:33 path and query /static {'file': 'gua.js'} 
15:37:33 请求结束
15:37:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:37:33 path and query /static {'file': 'weibo.js'} 
15:37:33 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:37:33 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:37:33 完整请求
15:37:33 请求结束
15:37:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:37:33 path and query /api/weibo/all {} 
15:37:33 完整请求
15:37:33 请求结束
15:37:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:37:33 path and query /static {'file': 'weibo.js'} 
15:37:33 完整请求
15:37:33 请求结束
15:37:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:37:33 path and query /api/weibo/all {} 
15:37:33 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:37:33 完整请求
15:37:33 请求结束
15:37:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:37:33 path and query /api/weibo/all {} 
15:37:37 完整请求
15:37:37 请求结束
15:37:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:37:37 path and query /api/weibo/all {} 
15:38:43 完整请求
15:38:43 请求结束
15:38:43 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:38:43 path and query /weibo/index {} 
15:38:43 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:38:44 完整请求
15:38:44 完整请求
15:38:44 请求结束
15:38:44 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:38:44 path and query /static {'file': 'gua.js'} 
15:38:44 请求结束
15:38:44 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:38:44 path and query /static {'file': 'weibo.js'} 
15:38:44 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:38:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:38:44 完整请求
15:38:44 请求结束
15:38:44 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:38:44 path and query /api/weibo/all {} 
15:38:44 kwargs,  {'weibo_id': 1} <class 'dict'>
15:38:44 kwargs,  {'weibo_id': 2} <class 'dict'>
15:38:44 kwargs,  {'weibo_id': 3} <class 'dict'>
15:38:44 kwargs,  {'weibo_id': 4} <class 'dict'>
15:38:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 4,
    "comments": [],
    "content": ""
  }
]
15:38:44 完整请求
15:38:44 请求结束
15:38:44 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:38:44 path and query /static {'file': 'weibo.js'} 
15:38:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:39:01 完整请求
15:39:01 请求结束
15:39:27 完整请求
15:39:27 请求结束
15:39:36 完整请求
15:39:36 请求结束
15:39:36 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:39:36 path and query /weibo/index {} 
15:39:36 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
15:39:36 完整请求
15:39:36 完整请求
15:39:36 请求结束
15:39:36 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:39:36 请求结束
15:39:36 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:39:36 path and query /static {'file': 'weibo.js'} 
15:39:36 path and query /static {'file': 'gua.js'} 
15:39:36 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

15:39:36 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

15:39:37 完整请求
15:39:37 请求结束
15:39:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:39:37 path and query /api/weibo/all {} 
15:39:37 kwargs,  {'weibo_id': 1} <class 'dict'>
15:39:37 kwargs,  {'weibo_id': 2} <class 'dict'>
15:39:37 kwargs,  {'weibo_id': 3} <class 'dict'>
15:39:37 kwargs,  {'weibo_id': 4} <class 'dict'>
15:39:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 4,
    "comments": [],
    "content": ""
  }
]
15:39:37 完整请求
15:39:37 请求结束
15:39:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
15:39:37 path and query /static {'file': 'weibo.js'} 
15:39:37 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:29:09 完整请求
18:29:09 请求结束
18:29:09 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:29:09 path and query /weibo/index {} 
18:29:09 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:29:10 完整请求
18:29:10 请求结束
18:29:10 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:29:10 path and query /static {'file': 'gua.js'} 
18:29:10 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

18:29:10 完整请求
18:29:10 请求结束
18:29:10 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:29:10 path and query /static {'file': 'weibo.js'} 
18:29:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:29:10 完整请求
18:29:10 请求结束
18:29:10 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:29:10 path and query /api/weibo/all {} 
18:29:10 kwargs,  {'weibo_id': 1} <class 'dict'>
18:29:10 kwargs,  {'weibo_id': 2} <class 'dict'>
18:29:10 kwargs,  {'weibo_id': 3} <class 'dict'>
18:29:10 kwargs,  {'weibo_id': 4} <class 'dict'>
18:29:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 4,
    "comments": [],
    "content": ""
  }
]
18:29:11 完整请求
18:29:11 请求结束
18:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:29:11 path and query /static {'file': 'weibo.js'} 
18:29:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:29:22 完整请求
18:29:22 请求结束
18:29:22 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:29:22 path and query /api/weibo/add {} {"title":"dsafddf"}
18:29:22 kwargs,  {'weibo_id': 5} <class 'dict'>
18:29:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "comments": [],
  "content": ""
}
18:37:00 完整请求
18:37:00 请求结束
18:37:00 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:37:00 path and query /weibo/index {} 
18:37:00 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:37:01 完整请求
18:37:01 请求结束
18:37:01 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:37:01 path and query /static {'file': 'gua.js'} 
18:37:01 完整请求
18:37:01 请求结束
18:37:01 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:37:01 path and query /static {'file': 'weibo.js'} 
18:37:01 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:37:01 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    Slog('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

18:37:01 完整请求
18:37:01 请求结束
18:37:01 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:37:01 path and query /static {'file': 'weibo.js'} 
18:37:01 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:37:12 完整请求
18:37:12 请求结束
18:37:12 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:37:12 path and query /weibo/index {} 
18:37:12 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:37:12 完整请求
18:37:12 请求结束
18:37:12 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:37:12 path and query /static {'file': 'gua.js'} 
18:37:12 完整请求
18:37:12 请求结束
18:37:12 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:37:12 path and query /static {'file': 'weibo.js'} 
18:37:12 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    Slog('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

18:37:12 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:37:12 完整请求
18:37:12 请求结束
18:37:12 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:37:12 path and query /static {'file': 'weibo.js'} 
18:37:12 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:37:23 完整请求
18:37:23 请求结束
18:37:23 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:37:23 path and query /weibo/index {} 
18:37:23 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:37:23 完整请求
18:37:23 请求结束
18:37:23 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:37:23 path and query /static {'file': 'gua.js'} 
18:37:23 完整请求
18:37:23 请求结束
18:37:23 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:37:23 path and query /static {'file': 'weibo.js'} 
18:37:23 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

18:37:23 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:37:23 完整请求
18:37:23 请求结束
18:37:23 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:37:23 path and query /api/weibo/all {} 
18:37:23 kwargs,  {'weibo_id': 1} <class 'dict'>
18:37:23 kwargs,  {'weibo_id': 2} <class 'dict'>
18:37:23 kwargs,  {'weibo_id': 3} <class 'dict'>
18:37:23 kwargs,  {'weibo_id': 4} <class 'dict'>
18:37:23 kwargs,  {'weibo_id': 5} <class 'dict'>
18:37:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 4,
    "comments": [],
    "content": ""
  },
  {
    "id": 5,
    "comments": [],
    "content": ""
  }
]
18:37:24 完整请求
18:37:24 请求结束
18:37:24 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:37:24 path and query /static {'file': 'weibo.js'} 
18:37:24 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:38:09 完整请求
18:38:09 请求结束
18:38:09 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:38:09 path and query /api/weibo/add {} {"title":"dsafddf"}
18:38:09 kwargs,  {'weibo_id': 6} <class 'dict'>
18:38:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "comments": [],
  "content": ""
}
18:39:04 完整请求
18:39:04 请求结束
18:39:04 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:39:04 path and query /api/weibo/add {} {"title":"dsafddf"}
18:39:04 kwargs,  {'weibo_id': 7} <class 'dict'>
18:39:04 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "comments": [],
  "content": ""
}
18:42:08 完整请求
18:42:08 请求结束
18:42:08 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:42:08 path and query /weibo/index {} 
18:42:08 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:42:08 完整请求
18:42:08 请求结束
18:42:08 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:42:08 path and query /static {'file': 'gua.js'} 
18:42:08 完整请求
18:42:08 请求结束
18:42:08 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:42:08 path and query /static {'file': 'weibo.js'} 
18:42:08 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

18:42:08 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:42:08 完整请求
18:42:08 请求结束
18:42:08 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:42:08 path and query /api/weibo/all {} 
18:42:08 kwargs,  {'weibo_id': 1} <class 'dict'>
18:42:08 kwargs,  {'weibo_id': 2} <class 'dict'>
18:42:08 kwargs,  {'weibo_id': 3} <class 'dict'>
18:42:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  }
]
18:42:09 完整请求
18:42:09 请求结束
18:42:09 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:42:09 path and query /static {'file': 'weibo.js'} 
18:42:09 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:42:13 完整请求
18:42:13 请求结束
18:42:13 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:42:13 path and query /api/weibo/add {} {"title":"dsafddf"}
18:42:13 kwargs,  {'weibo_id': 4} <class 'dict'>
18:42:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "comments": [],
  "content": ""
}
18:42:50 完整请求
18:42:50 请求结束
18:42:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:42:50 path and query /api/weibo/add {} {"title":"dsafddf"}
18:42:50 kwargs,  {'weibo_id': 5} <class 'dict'>
18:42:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "comments": [],
  "content": ""
}
18:49:02 完整请求
18:49:02 请求结束
18:49:02 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:02 path and query /weibo/index {} 
18:49:02 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:49:02 完整请求
18:49:02 请求结束
18:49:02 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:02 path and query /static {'file': 'gua.js'} 
18:49:02 完整请求
18:49:02 请求结束
18:49:02 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:02 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

18:49:02 path and query /static {'file': 'weibo.js'} 
18:49:02 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:49:03 完整请求
18:49:03 请求结束
18:49:03 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:03 path and query /api/weibo/all {} 
18:49:03 kwargs,  {'weibo_id': 1} <class 'dict'>
18:49:03 kwargs,  {'weibo_id': 2} <class 'dict'>
18:49:03 kwargs,  {'weibo_id': 3} <class 'dict'>
18:49:03 kwargs,  {'weibo_id': 4} <class 'dict'>
18:49:03 kwargs,  {'weibo_id': 5} <class 'dict'>
18:49:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 4,
    "comments": [],
    "content": ""
  },
  {
    "id": 5,
    "comments": [],
    "content": ""
  }
]
18:49:03 完整请求
18:49:03 请求结束
18:49:03 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:03 path and query /static {'file': 'weibo.js'} 
18:49:03 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:49:07 完整请求
18:49:07 请求结束
18:49:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:07 path and query /api/weibo/add {} {"content":"dsafddf"}
18:49:07 kwargs,  {'weibo_id': 6} <class 'dict'>
18:49:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "comments": [],
  "content": "dsafddf"
}
18:49:34 完整请求
18:49:34 请求结束
18:49:34 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:34 path and query /weibo/index {} 
18:49:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:49:35 完整请求
18:49:35 请求结束
18:49:35 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:35 path and query /static {'file': 'gua.js'} 
18:49:35 完整请求
18:49:35 请求结束
18:49:35 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:35 path and query /static {'file': 'weibo.js'} 
18:49:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

18:49:35 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:49:35 完整请求
18:49:35 请求结束
18:49:35 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:35 path and query /api/weibo/all {} 
18:49:35 完整请求
18:49:35 完整请求
18:49:35 请求结束
18:49:35 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:35 path and query /api/weibo/all {} 
18:49:35 请求结束
18:49:35 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:35 path and query /static {'file': 'weibo.js'} 
18:49:35 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:49:35 完整请求
18:49:35 请求结束
18:49:35 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:35 path and query /api/weibo/all {} 
18:49:46 完整请求
18:49:46 请求结束
18:49:46 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:46 path and query /weibo/index {} 
18:49:46 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:49:46 完整请求
18:49:46 请求结束
18:49:46 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:46 path and query /static {'file': 'gua.js'} 
18:49:46 完整请求
18:49:46 请求结束
18:49:46 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:46 path and query /static {'file': 'weibo.js'} 
18:49:46 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

18:49:46 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:49:46 完整请求
18:49:46 请求结束
18:49:46 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:46 path and query /api/weibo/all {} 
18:49:46 kwargs,  {'weibo_id': 1} <class 'dict'>
18:49:46 kwargs,  {'weibo_id': 2} <class 'dict'>
18:49:46 kwargs,  {'weibo_id': 3} <class 'dict'>
18:49:46 kwargs,  {'weibo_id': 6} <class 'dict'>
18:49:46 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  }
]
18:49:47 完整请求
18:49:47 请求结束
18:49:47 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:49:47 path and query /static {'file': 'weibo.js'} 
18:49:47 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:50:06 完整请求
18:50:06 请求结束
18:50:16 完整请求
18:50:16 请求结束
18:50:16 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:50:16 path and query /weibo/index {} 
18:50:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:50:16 完整请求
18:50:16 请求结束
18:50:16 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:50:16 path and query /static {'file': 'gua.js'} 
18:50:16 完整请求
18:50:16 请求结束
18:50:16 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:50:16 path and query /static {'file': 'weibo.js'} 
18:50:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

18:50:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:50:17 完整请求
18:50:17 请求结束
18:50:17 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:50:17 path and query /api/weibo/all {} 
18:50:17 kwargs,  {'weibo_id': 1} <class 'dict'>
18:50:17 kwargs,  {'weibo_id': 2} <class 'dict'>
18:50:17 kwargs,  {'weibo_id': 3} <class 'dict'>
18:50:17 kwargs,  {'weibo_id': 6} <class 'dict'>
18:50:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  }
]
18:50:17 完整请求
18:50:17 请求结束
18:50:17 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:50:17 path and query /static {'file': 'weibo.js'} 
18:50:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

18:50:28 完整请求
18:50:28 请求结束
18:50:28 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:50:28 path and query /api/weibo/add {} {"content":"fegvdf"}
18:50:28 kwargs,  {'weibo_id': 7} <class 'dict'>
18:50:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "comments": [],
  "content": "fegvdf"
}
18:53:07 完整请求
18:53:07 请求结束
18:53:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:53:07 path and query /todo/index {} 
18:53:07 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
18:53:07 完整请求
18:53:07 请求结束
18:53:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:53:07 path and query /static {'file': 'gua.js'} 
18:53:07 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

18:53:07 完整请求
18:53:07 请求结束
18:53:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:53:07 path and query /static {'file': 'todo.js'} 
18:53:07 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
18:53:07 完整请求
18:53:07 请求结束
18:53:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:53:07 path and query /api/todo/all {} 
18:53:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "title": "瓜",
    "completed": false,
    "ct": 1488975265,
    "id": 4,
    "ut": 1488978669
  },
  {
    "title": "1231",
    "completed": false,
    "ct": 1545979581,
    "id": 5,
    "ut": 1545979581
  }
]
18:53:12 完整请求
18:53:12 请求结束
18:53:12 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:53:12 path and query /api/todo/add {} {"title":"dsaddea"}
18:53:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "dsaddea",
  "completed": false,
  "ct": 1545994392,
  "id": 6,
  "ut": 1545994392
}
18:53:14 完整请求
18:53:14 请求结束
18:53:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
18:53:14 path and query /api/todo/delete {'id': '4'} 
18:53:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "瓜",
  "completed": false,
  "ct": 1488975265,
  "id": 4,
  "ut": 1488978669
}
19:02:41 完整请求
19:02:41 请求结束
19:02:41 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:02:41 path and query /weibo/index {} 
19:02:41 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:02:41 完整请求
19:02:41 请求结束
19:02:41 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:02:41 path and query /static {'file': 'gua.js'} 
19:02:41 完整请求
19:02:41 请求结束
19:02:41 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:02:41 path and query /static {'file': 'weibo.js'} 
19:02:41 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

19:02:41 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="todo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:02:41 完整请求
19:02:41 请求结束
19:02:41 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:02:41 path and query /api/weibo/all {} 
19:02:41 kwargs,  {'weibo_id': 1} <class 'dict'>
19:02:41 kwargs,  {'weibo_id': 2} <class 'dict'>
19:02:41 kwargs,  {'weibo_id': 3} <class 'dict'>
19:02:41 kwargs,  {'weibo_id': 6} <class 'dict'>
19:02:41 kwargs,  {'weibo_id': 7} <class 'dict'>
19:02:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  }
]
19:02:41 完整请求
19:02:41 请求结束
19:02:41 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:02:41 path and query /static {'file': 'weibo.js'} 
19:02:41 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="todo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:04:27 完整请求
19:04:27 请求结束
19:04:27 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:04:27 path and query /weibo/index {} 
19:04:27 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:04:27 完整请求
19:04:27 请求结束
19:04:27 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:04:27 path and query /static {'file': 'gua.js'} 
19:04:27 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

19:04:27 完整请求
19:04:27 请求结束
19:04:27 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:04:27 path and query /static {'file': 'weibo.js'} 
19:04:27 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="todo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:04:27 完整请求
19:04:27 请求结束
19:04:27 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:04:27 path and query /api/weibo/all {} 
19:04:27 kwargs,  {'weibo_id': 1} <class 'dict'>
19:04:27 kwargs,  {'weibo_id': 2} <class 'dict'>
19:04:27 kwargs,  {'weibo_id': 3} <class 'dict'>
19:04:27 kwargs,  {'weibo_id': 6} <class 'dict'>
19:04:27 kwargs,  {'weibo_id': 7} <class 'dict'>
19:04:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  }
]
19:04:28 完整请求
19:04:28 请求结束
19:04:28 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:04:28 path and query /static {'file': 'weibo.js'} 
19:04:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="todo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
            bindEventWeiboAdd()
//    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:06:11 完整请求
19:06:11 请求结束
19:06:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:06:11 path and query /weibo/index {} 
19:06:11 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:06:11 完整请求
19:06:11 请求结束
19:06:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:06:11 path and query /static {'file': 'gua.js'} 
19:06:11 完整请求
19:06:11 请求结束
19:06:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:06:11 path and query /static {'file': 'weibo.js'} 
19:06:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

19:06:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="todo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:06:11 完整请求
19:06:11 请求结束
19:06:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:06:11 path and query /static {'file': 'weibo.js'} 
19:06:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="todo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:06:31 完整请求
19:06:31 请求结束
19:07:21 完整请求
19:07:21 请求结束
19:07:21 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:07:21 path and query /weibo/index {} 
19:07:21 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:07:21 完整请求
19:07:21 请求结束
19:07:21 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:07:21 path and query /static {'file': 'gua.js'} 
19:07:21 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

19:07:21 完整请求
19:07:21 请求结束
19:07:21 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:07:21 path and query /static {'file': 'weibo.js'} 
19:07:21 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="todo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:07:22 完整请求
19:07:22 请求结束
19:07:22 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:07:22 path and query /api/weibo/all {} 
19:07:22 kwargs,  {'weibo_id': 1} <class 'dict'>
19:07:22 kwargs,  {'weibo_id': 2} <class 'dict'>
19:07:22 kwargs,  {'weibo_id': 3} <class 'dict'>
19:07:22 kwargs,  {'weibo_id': 6} <class 'dict'>
19:07:22 kwargs,  {'weibo_id': 7} <class 'dict'>
19:07:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  }
]
19:07:22 完整请求
19:07:22 请求结束
19:07:22 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:07:22 path and query /static {'file': 'weibo.js'} 
19:07:22 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="todo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:07:55 完整请求
19:07:55 请求结束
19:07:55 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:07:55 path and query /weibo/index {} 
19:07:55 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:07:55 完整请求
19:07:55 请求结束
19:07:55 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:07:55 path and query /static {'file': 'gua.js'} 
19:07:55 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

19:07:55 完整请求
19:07:55 请求结束
19:07:55 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:07:55 path and query /static {'file': 'weibo.js'} 
19:07:55 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:07:56 完整请求
19:07:56 请求结束
19:07:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:07:56 path and query /api/weibo/all {} 
19:07:56 kwargs,  {'weibo_id': 1} <class 'dict'>
19:07:56 kwargs,  {'weibo_id': 2} <class 'dict'>
19:07:56 kwargs,  {'weibo_id': 3} <class 'dict'>
19:07:56 kwargs,  {'weibo_id': 6} <class 'dict'>
19:07:56 kwargs,  {'weibo_id': 7} <class 'dict'>
19:07:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  }
]
19:07:56 完整请求
19:07:56 请求结束
19:07:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:07:56 path and query /static {'file': 'weibo.js'} 
19:07:56 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:08:06 完整请求
19:08:06 请求结束
19:08:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:08:06 path and query /weibo/index {} 
19:08:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:08:06 完整请求
19:08:06 请求结束
19:08:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:08:06 path and query /static {'file': 'gua.js'} 
19:08:06 完整请求
19:08:06 请求结束
19:08:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:08:06 path and query /static {'file': 'weibo.js'} 
19:08:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

19:08:06 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:08:06 完整请求
19:08:06 请求结束
19:08:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:08:06 path and query /api/weibo/all {} 
19:08:06 kwargs,  {'weibo_id': 1} <class 'dict'>
19:08:06 kwargs,  {'weibo_id': 2} <class 'dict'>
19:08:06 kwargs,  {'weibo_id': 3} <class 'dict'>
19:08:06 kwargs,  {'weibo_id': 6} <class 'dict'>
19:08:06 kwargs,  {'weibo_id': 7} <class 'dict'>
19:08:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  }
]
19:08:06 完整请求
19:08:06 请求结束
19:08:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:08:06 path and query /static {'file': 'weibo.js'} 
19:08:06 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:09:11 完整请求
19:09:11 请求结束
19:09:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:09:11 path and query /weibo/index {} 
19:09:11 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:09:11 完整请求
19:09:11 完整请求
19:09:11 请求结束
19:09:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:09:11 path and query /static {'file': 'weibo.js'} 
19:09:11 请求结束
19:09:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:09:11 path and query /static {'file': 'gua.js'} 
19:09:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

19:09:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:09:11 完整请求
19:09:11 请求结束
19:09:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:09:11 path and query /api/weibo/all {} 
19:09:11 kwargs,  {'weibo_id': 1} <class 'dict'>
19:09:11 kwargs,  {'weibo_id': 2} <class 'dict'>
19:09:11 kwargs,  {'weibo_id': 3} <class 'dict'>
19:09:11 kwargs,  {'weibo_id': 6} <class 'dict'>
19:09:11 kwargs,  {'weibo_id': 7} <class 'dict'>
19:09:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  }
]
19:09:12 完整请求
19:09:12 请求结束
19:09:12 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:09:12 path and query /static {'file': 'weibo.js'} 
19:09:12 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-delete')){
            // 删除这个 Weibo
            log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:09:34 完整请求
19:09:34 请求结束
19:09:34 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:09:34 path and query /weibo/index {} 
19:09:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:09:35 完整请求
19:09:35 完整请求
19:09:35 请求结束
19:09:35 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:09:35 path and query /static {'file': 'weibo.js'} 
19:09:35 请求结束
19:09:35 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:09:35 path and query /static {'file': 'gua.js'} 
19:09:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

19:09:35 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:09:35 完整请求
19:09:35 请求结束
19:09:35 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:09:35 path and query /api/weibo/all {} 
19:09:35 kwargs,  {'weibo_id': 1} <class 'dict'>
19:09:35 kwargs,  {'weibo_id': 2} <class 'dict'>
19:09:35 kwargs,  {'weibo_id': 3} <class 'dict'>
19:09:35 kwargs,  {'weibo_id': 6} <class 'dict'>
19:09:35 kwargs,  {'weibo_id': 7} <class 'dict'>
19:09:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  }
]
19:09:35 完整请求
19:09:35 请求结束
19:09:35 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:09:35 path and query /static {'file': 'weibo.js'} 
19:09:35 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:12:56 完整请求
19:12:56 请求结束
19:12:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:12:56 path and query /weibo/index {} 
19:12:56 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:12:56 完整请求
19:12:56 请求结束
19:12:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:12:56 path and query /static {'file': 'gua.js'} 
19:12:56 完整请求
19:12:56 请求结束
19:12:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:12:56 path and query /static {'file': 'weibo.js'} 
19:12:56 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

19:12:56 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:12:56 完整请求
19:12:56 请求结束
19:12:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:12:56 path and query /api/weibo/all {} 
19:12:56 kwargs,  {'weibo_id': 1} <class 'dict'>
19:12:56 kwargs,  {'weibo_id': 2} <class 'dict'>
19:12:56 kwargs,  {'weibo_id': 3} <class 'dict'>
19:12:56 kwargs,  {'weibo_id': 6} <class 'dict'>
19:12:56 kwargs,  {'weibo_id': 7} <class 'dict'>
19:12:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  }
]
19:12:56 完整请求
19:12:56 请求结束
19:12:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:12:56 path and query /static {'file': 'weibo.js'} 
19:12:56 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:13:03 完整请求
19:13:03 请求结束
19:13:03 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:03 path and query /api/todo/delete {'id': '7'} 
19:13:33 完整请求
19:13:33 请求结束
19:13:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:33 path and query /weibo/index {} 
19:13:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:13:33 完整请求
19:13:33 请求结束
19:13:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:33 path and query /static {'file': 'gua.js'} 
19:13:33 完整请求
19:13:33 请求结束
19:13:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:33 path and query /static {'file': 'weibo.js'} 
19:13:33 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:13:33 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

19:13:33 完整请求
19:13:33 请求结束
19:13:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:33 path and query /api/weibo/all {} 
19:13:33 kwargs,  {'weibo_id': 1} <class 'dict'>
19:13:33 kwargs,  {'weibo_id': 2} <class 'dict'>
19:13:33 kwargs,  {'weibo_id': 3} <class 'dict'>
19:13:33 kwargs,  {'weibo_id': 6} <class 'dict'>
19:13:33 kwargs,  {'weibo_id': 7} <class 'dict'>
19:13:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  }
]
19:13:34 完整请求
19:13:34 请求结束
19:13:34 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:34 path and query /static {'file': 'weibo.js'} 
19:13:34 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:13:36 完整请求
19:13:36 请求结束
19:13:36 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:36 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:38 完整请求
19:13:38 请求结束
19:13:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:38 path and query /api/todo/delete {'id': '7'} 
19:13:48 完整请求
19:13:48 请求结束
19:13:48 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:48 path and query /api/todo/delete {'id': '6'} 
19:13:48 完整请求
19:13:48 请求结束
19:13:48 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:48 path and query /api/todo/delete {'id': '7'} 
19:13:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "dsaddea",
  "completed": false,
  "ct": 1545994392,
  "id": 6,
  "ut": 1545994392
}
19:13:57 完整请求
19:13:57 请求结束
19:13:57 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:13:57 path and query /api/weibo/add {} {"content":"fegvdf"}
19:13:57 kwargs,  {'weibo_id': 8} <class 'dict'>
19:13:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "comments": [],
  "content": "fegvdf"
}
19:14:05 完整请求
19:14:05 请求结束
19:14:05 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:05 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:14 完整请求
19:14:14 请求结束
19:14:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:14 path and query /api/todo/delete {'id': '8'} 
19:14:18 完整请求
19:14:18 请求结束
19:14:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:18 path and query /api/weibo/add {} {"content":"fegvdf"}
19:14:18 kwargs,  {'weibo_id': 9} <class 'dict'>
19:14:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "comments": [],
  "content": "fegvdf"
}
19:14:22 完整请求
19:14:22 请求结束
19:14:22 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:14:22 path and query /api/todo/delete {'id': '9'} 
19:15:07 完整请求
19:15:07 请求结束
19:15:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:15:07 path and query /api/todo/delete {'id': '9'} 
19:15:07 完整请求
19:15:07 请求结束
19:15:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:15:07 path and query /api/todo/add {} {"title":"432423"}
19:15:07 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "432423",
  "completed": false,
  "ct": 1545995707,
  "id": 6,
  "ut": 1545995707
}
19:15:22 完整请求
19:15:22 请求结束
19:15:22 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:15:22 path and query /api/todo/delete {'id': '9'} 
19:15:22 完整请求
19:15:22 请求结束
19:15:22 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:15:22 path and query /api/todo/delete {'id': '6'} 
19:15:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "432423",
  "completed": false,
  "ct": 1545995707,
  "id": 6,
  "ut": 1545995707
}
19:15:22 完整请求
19:15:22 请求结束
19:15:22 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:15:22 path and query /api/todo/delete {'id': '9'} 
19:15:25 完整请求
19:15:25 请求结束
19:15:25 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:15:25 path and query /api/todo/add {} {"title":"fsdf"}
19:15:25 完整请求
19:15:25 请求结束
19:15:25 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:15:25 path and query /api/todo/delete {'id': '9'} 
19:15:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "fsdf",
  "completed": false,
  "ct": 1545995725,
  "id": 6,
  "ut": 1545995725
}
19:15:25 完整请求
19:15:25 请求结束
19:15:25 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:15:25 path and query /api/todo/delete {'id': '9'} 
19:20:32 完整请求
19:20:32 完整请求
19:20:32 请求结束
19:20:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:20:32 path and query /api/todo/delete {'id': '9'} 
19:20:32 请求结束
19:20:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:20:32 path and query /api/todo/delete {'id': '9'} 
19:20:32 完整请求
19:20:32 请求结束
19:20:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:20:32 path and query /api/todo/delete {'id': '9'} 
19:20:32 完整请求
19:20:32 请求结束
19:20:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:20:32 path and query /api/todo/delete {'id': '9'} 
19:20:32 完整请求
19:20:32 请求结束
19:20:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:20:32 path and query /api/todo/delete {'id': '9'} 
19:20:32 完整请求
19:20:32 请求结束
19:20:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:20:32 path and query /api/todo/delete {'id': '9'} 
19:20:32 完整请求
19:20:32 请求结束
19:20:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:20:32 path and query /api/todo/delete {'id': '9'} 
19:20:32 完整请求
19:20:32 请求结束
19:20:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:20:32 path and query /api/todo/delete {'id': '9'} 
19:20:32 完整请求
19:20:32 请求结束
19:20:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:20:32 path and query /api/todo/delete {'id': '9'} 
19:22:51 完整请求
19:22:51 请求结束
19:22:51 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:22:51 path and query /api/todo/delete {'id': '9'} 
19:22:51 完整请求
19:22:51 请求结束
19:22:51 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:22:51 path and query /api/weibo/add {} {"content":"fegvdffgrwtrg"}
19:22:51 kwargs,  {'weibo_id': 10} <class 'dict'>
19:22:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "comments": [],
  "content": "fegvdffgrwtrg"
}
19:22:56 完整请求
19:22:56 完整请求
19:22:56 请求结束
19:22:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:22:56 path and query /api/todo/delete {'id': '9'} 
19:22:56 请求结束
19:22:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:22:56 path and query /api/todo/delete {'id': '10'} 
19:22:56 完整请求
19:22:56 请求结束
19:22:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:22:56 path and query /api/todo/delete {'id': '9'} 
19:22:56 完整请求
19:22:56 请求结束
19:22:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:22:56 path and query /api/todo/delete {'id': '10'} 
19:22:56 完整请求
19:22:56 请求结束
19:22:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:22:56 path and query /api/todo/delete {'id': '9'} 
19:22:56 完整请求
19:22:56 请求结束
19:22:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:22:56 path and query /api/todo/delete {'id': '10'} 
19:22:56 完整请求
19:22:56 请求结束
19:22:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:22:56 path and query /api/todo/delete {'id': '9'} 
19:22:56 完整请求
19:22:56 请求结束
19:22:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:22:56 path and query /api/todo/delete {'id': '10'} 
19:22:56 完整请求
19:22:56 请求结束
19:22:56 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:22:56 path and query /api/todo/delete {'id': '10'} 
19:23:04 完整请求
19:23:04 请求结束
19:23:04 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:04 path and query /api/todo/delete {'id': '10'} 
19:23:04 完整请求
19:23:04 请求结束
19:23:04 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:04 path and query /api/todo/delete {'id': '10'} 
19:23:04 完整请求
19:23:04 请求结束
19:23:04 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:04 path and query /api/todo/delete {'id': '10'} 
19:23:04 完整请求
19:23:04 请求结束
19:23:04 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:04 path and query /api/todo/delete {'id': '10'} 
19:23:04 完整请求
19:23:04 请求结束
19:23:04 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:04 path and query /api/todo/delete {'id': '10'} 
19:23:04 完整请求
19:23:04 请求结束
19:23:04 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:04 path and query /api/todo/delete {'id': '10'} 
19:23:04 完整请求
19:23:04 请求结束
19:23:04 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:04 path and query /api/todo/delete {'id': '10'} 
19:23:04 完整请求
19:23:04 请求结束
19:23:04 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:04 path and query /api/todo/delete {'id': '10'} 
19:23:04 完整请求
19:23:04 请求结束
19:23:04 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:04 path and query /api/todo/delete {'id': '10'} 
19:23:04 完整请求
19:23:04 请求结束
19:23:04 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:04 path and query /api/todo/delete {'id': '10'} 
19:23:04 完整请求
19:23:04 请求结束
19:23:04 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:04 path and query /api/todo/delete {'id': '10'} 
19:23:28 完整请求
19:23:28 完整请求
19:23:28 请求结束
19:23:28 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:28 path and query /api/todo/delete {'id': '10'} 
19:23:28 请求结束
19:23:28 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:28 path and query /api/weibo/add {} {"content":"fegvdffgrwtrg"}
19:23:28 kwargs,  {'weibo_id': 11} <class 'dict'>
19:23:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "comments": [],
  "content": "fegvdffgrwtrg"
}
19:23:32 完整请求
19:23:32 完整请求
19:23:32 请求结束
19:23:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:32 path and query /api/todo/delete {'id': '10'} 
19:23:32 请求结束
19:23:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:32 path and query /api/todo/delete {'id': '11'} 
19:23:32 完整请求
19:23:32 请求结束
19:23:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:32 path and query /api/todo/delete {'id': '10'} 
19:23:32 完整请求
19:23:32 请求结束
19:23:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:32 path and query /api/todo/delete {'id': '11'} 
19:23:32 完整请求
19:23:32 请求结束
19:23:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:32 path and query /api/todo/delete {'id': '10'} 
19:23:32 完整请求
19:23:32 请求结束
19:23:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:32 path and query /api/todo/delete {'id': '11'} 
19:23:32 完整请求
19:23:32 请求结束
19:23:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:32 path and query /api/todo/delete {'id': '11'} 
19:23:38 完整请求
19:23:38 完整请求
19:23:38 请求结束
19:23:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:38 path and query /api/todo/delete {'id': '11'} 
19:23:38 请求结束
19:23:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:38 path and query /api/todo/delete {'id': '11'} 
19:23:38 完整请求
19:23:38 请求结束
19:23:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:38 path and query /api/todo/delete {'id': '11'} 
19:23:38 完整请求
19:23:38 请求结束
19:23:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:38 path and query /api/todo/delete {'id': '11'} 
19:23:38 完整请求
19:23:38 请求结束
19:23:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:38 path and query /api/todo/delete {'id': '11'} 
19:23:38 完整请求
19:23:38 请求结束
19:23:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:38 path and query /api/todo/delete {'id': '11'} 
19:23:38 完整请求
19:23:38 请求结束
19:23:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:38 path and query /api/todo/delete {'id': '11'} 
19:23:38 完整请求
19:23:38 请求结束
19:23:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:38 path and query /api/todo/delete {'id': '11'} 
19:23:38 完整请求
19:23:38 请求结束
19:23:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:38 path and query /api/todo/delete {'id': '11'} 
19:23:38 完整请求
19:23:38 请求结束
19:23:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:38 path and query /api/todo/delete {'id': '11'} 
19:23:38 完整请求
19:23:38 请求结束
19:23:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:38 path and query /api/todo/delete {'id': '11'} 
19:23:38 完整请求
19:23:38 请求结束
19:23:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:38 path and query /api/todo/delete {'id': '11'} 
19:23:38 完整请求
19:23:38 请求结束
19:23:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:23:38 path and query /api/todo/delete {'id': '11'} 
19:25:17 完整请求
19:25:17 请求结束
19:25:17 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:17 path and query /api/weibo/add {} {"content":"fegvdffgrwtrg"}
19:25:17 kwargs,  {'weibo_id': 12} <class 'dict'>
19:25:17 完整请求
19:25:17 请求结束
19:25:17 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:17 path and query /api/todo/delete {'id': '11'} 
19:25:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "comments": [],
  "content": "fegvdffgrwtrg"
}
19:25:22 完整请求
19:25:22 完整请求
19:25:22 请求结束
19:25:22 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:22 path and query /api/todo/delete {'id': '11'} 
19:25:22 请求结束
19:25:22 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:22 path and query /api/todo/delete {'id': '12'} 
19:25:22 完整请求
19:25:22 请求结束
19:25:22 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:22 path and query /api/todo/delete {'id': '11'} 
19:25:22 完整请求
19:25:22 请求结束
19:25:22 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:22 path and query /api/todo/delete {'id': '12'} 
19:25:22 完整请求
19:25:22 请求结束
19:25:22 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:22 path and query /api/todo/delete {'id': '12'} 
19:25:38 完整请求
19:25:38 请求结束
19:25:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:38 path and query /api/todo/delete {'id': '12'} 
19:25:38 完整请求
19:25:38 请求结束
19:25:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:38 path and query /api/todo/delete {'id': '12'} 
19:25:38 完整请求
19:25:38 请求结束
19:25:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:38 path and query /api/todo/delete {'id': '12'} 
19:25:38 完整请求
19:25:38 请求结束
19:25:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:38 path and query /api/todo/delete {'id': '12'} 
19:25:38 完整请求
19:25:38 请求结束
19:25:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:38 path and query /api/todo/delete {'id': '12'} 
19:25:38 完整请求
19:25:38 请求结束
19:25:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:38 path and query /api/todo/delete {'id': '12'} 
19:25:38 完整请求
19:25:38 请求结束
19:25:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:38 path and query /api/todo/delete {'id': '12'} 
19:25:38 完整请求
19:25:38 请求结束
19:25:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:38 path and query /api/todo/delete {'id': '12'} 
19:25:38 完整请求
19:25:38 请求结束
19:25:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:38 path and query /api/todo/delete {'id': '12'} 
19:25:38 完整请求
19:25:38 请求结束
19:25:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:38 path and query /api/todo/delete {'id': '12'} 
19:25:38 完整请求
19:25:38 请求结束
19:25:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:38 path and query /api/todo/delete {'id': '12'} 
19:25:38 完整请求
19:25:38 请求结束
19:25:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:38 path and query /api/todo/delete {'id': '12'} 
19:25:38 完整请求
19:25:38 请求结束
19:25:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:38 path and query /api/todo/delete {'id': '12'} 
19:25:38 完整请求
19:25:38 请求结束
19:25:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:25:38 path and query /api/todo/delete {'id': '12'} 
19:28:42 完整请求
19:28:42 请求结束
19:28:42 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:42 path and query /weibo/index {} 
19:28:42 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:28:42 完整请求
19:28:42 请求结束
19:28:42 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:42 path and query /static {'file': 'gua.js'} 
19:28:42 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

19:28:42 完整请求
19:28:42 请求结束
19:28:42 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:42 path and query /static {'file': 'weibo.js'} 
19:28:42 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}">
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:28:42 完整请求
19:28:42 请求结束
19:28:42 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:42 path and query /api/weibo/all {} 
19:28:42 kwargs,  {'weibo_id': 1} <class 'dict'>
19:28:42 kwargs,  {'weibo_id': 2} <class 'dict'>
19:28:42 kwargs,  {'weibo_id': 3} <class 'dict'>
19:28:42 kwargs,  {'weibo_id': 6} <class 'dict'>
19:28:42 kwargs,  {'weibo_id': 7} <class 'dict'>
19:28:42 kwargs,  {'weibo_id': 8} <class 'dict'>
19:28:42 kwargs,  {'weibo_id': 9} <class 'dict'>
19:28:42 kwargs,  {'weibo_id': 10} <class 'dict'>
19:28:42 kwargs,  {'weibo_id': 11} <class 'dict'>
19:28:42 kwargs,  {'weibo_id': 12} <class 'dict'>
19:28:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 9,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 10,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 11,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 12,
    "comments": [],
    "content": "fegvdffgrwtrg"
  }
]
19:28:42 完整请求
19:28:42 请求结束
19:28:42 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:42 path and query /static {'file': 'weibo.js'} 
19:28:42 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}">
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:28:46 完整请求
19:28:46 请求结束
19:28:46 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:46 path and query /api/todo/delete {'id': '12'} 
19:28:50 完整请求
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '12'} 
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '11'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '11'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '12'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '12'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '11'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '11'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '12'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '11'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '12'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '11'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '12'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '12'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '11'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '12'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '11'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '12'} 
19:28:50 完整请求
19:28:50 请求结束
19:28:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:50 path and query /api/todo/delete {'id': '11'} 
19:28:53 完整请求
19:28:53 完整请求
19:28:53 请求结束
19:28:53 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:53 path and query /api/todo/delete {'id': '10'} 
19:28:53 请求结束
19:28:53 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:53 path and query /api/todo/delete {'id': '11'} 
19:28:58 完整请求
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:28:58 完整请求
19:28:58 请求结束
19:28:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:28:58 path and query /api/todo/delete {'id': '10'} 
19:29:06 完整请求
19:29:06 请求结束
19:29:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:06 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:07 完整请求
19:29:07 请求结束
19:29:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:07 path and query /api/todo/delete {'id': '7'} 
19:29:09 完整请求
19:29:09 完整请求
19:29:09 请求结束
19:29:09 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:09 path and query /api/todo/delete {'id': '8'} 
19:29:09 请求结束
19:29:09 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:09 path and query /api/todo/delete {'id': '7'} 
19:29:11 完整请求
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:11 完整请求
19:29:11 请求结束
19:29:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:11 path and query /api/todo/delete {'id': '8'} 
19:29:14 完整请求
19:29:14 请求结束
19:29:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:29:14 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:37 完整请求
19:30:37 请求结束
19:30:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:37 path and query /api/todo/delete {'id': '9'} 
19:30:40 完整请求
19:30:40 请求结束
19:30:40 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:40 path and query /weibo/index {} 
19:30:40 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:30:40 完整请求
19:30:40 请求结束
19:30:40 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:40 path and query /static {'file': 'gua.js'} 
19:30:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

19:30:40 完整请求
19:30:40 请求结束
19:30:40 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:40 path and query /static {'file': 'weibo.js'} 
19:30:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}">
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:30:40 完整请求
19:30:40 请求结束
19:30:40 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:40 path and query /api/weibo/all {} 
19:30:40 kwargs,  {'weibo_id': 1} <class 'dict'>
19:30:40 kwargs,  {'weibo_id': 2} <class 'dict'>
19:30:40 kwargs,  {'weibo_id': 3} <class 'dict'>
19:30:40 kwargs,  {'weibo_id': 6} <class 'dict'>
19:30:40 kwargs,  {'weibo_id': 7} <class 'dict'>
19:30:40 kwargs,  {'weibo_id': 8} <class 'dict'>
19:30:40 kwargs,  {'weibo_id': 9} <class 'dict'>
19:30:40 kwargs,  {'weibo_id': 10} <class 'dict'>
19:30:40 kwargs,  {'weibo_id': 11} <class 'dict'>
19:30:40 kwargs,  {'weibo_id': 12} <class 'dict'>
19:30:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 9,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 10,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 11,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 12,
    "comments": [],
    "content": "fegvdffgrwtrg"
  }
]
19:30:41 完整请求
19:30:41 请求结束
19:30:41 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:41 path and query /static {'file': 'weibo.js'} 
19:30:41 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}">
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:30:47 完整请求
19:30:47 请求结束
19:30:47 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:47 path and query /api/weibo/delete {'id': '12'} 
19:30:47 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:30:59 完整请求
19:30:59 请求结束
19:30:59 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:30:59 path and query /api/weibo/delete {'id': '11'} 
19:30:59 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:31:11 完整请求
19:31:11 请求结束
19:31:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:31:11 path and query /api/todo/add {} {"title":"re"}
19:31:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "re",
  "completed": false,
  "ct": 1545996671,
  "id": 7,
  "ut": 1545996671
}
19:31:37 完整请求
19:31:37 请求结束
19:31:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:31:37 path and query /weibo/index {} 
19:31:37 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:31:37 完整请求
19:31:37 请求结束
19:31:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:31:37 path and query /static {'file': 'gua.js'} 
19:31:37 完整请求
19:31:37 请求结束
19:31:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:31:37 path and query /static {'file': 'weibo.js'} 
19:31:37 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

19:31:37 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}">
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:31:37 完整请求
19:31:37 请求结束
19:31:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:31:37 path and query /api/weibo/all {} 
19:31:37 kwargs,  {'weibo_id': 1} <class 'dict'>
19:31:37 kwargs,  {'weibo_id': 2} <class 'dict'>
19:31:37 kwargs,  {'weibo_id': 3} <class 'dict'>
19:31:37 kwargs,  {'weibo_id': 6} <class 'dict'>
19:31:37 kwargs,  {'weibo_id': 7} <class 'dict'>
19:31:37 kwargs,  {'weibo_id': 8} <class 'dict'>
19:31:37 kwargs,  {'weibo_id': 9} <class 'dict'>
19:31:37 kwargs,  {'weibo_id': 10} <class 'dict'>
19:31:37 kwargs,  {'weibo_id': 11} <class 'dict'>
19:31:37 kwargs,  {'weibo_id': 12} <class 'dict'>
19:31:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 9,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 10,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 11,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 12,
    "comments": [],
    "content": "fegvdffgrwtrg"
  }
]
19:31:38 完整请求
19:31:38 请求结束
19:31:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:31:38 path and query /static {'file': 'weibo.js'} 
19:31:38 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}">
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:32:15 完整请求
19:32:15 请求结束
19:32:15 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:32:15 path and query /api/weibo/delete {'id': '12'} 
19:32:15 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:32:17 完整请求
19:32:17 请求结束
19:32:17 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:32:17 path and query /api/weibo/delete {'id': '11'} 
19:32:17 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:32:19 完整请求
19:32:19 请求结束
19:32:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:32:19 path and query /api/weibo/delete {'id': '10'} 
19:32:19 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:33:20 完整请求
19:33:20 请求结束
19:33:20 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:33:20 path and query /weibo/index {} 
19:33:20 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:33:20 完整请求
19:33:20 请求结束
19:33:20 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:33:20 path and query /static {'file': 'gua.js'} 
19:33:20 完整请求
19:33:20 请求结束
19:33:20 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:33:20 path and query /static {'file': 'weibo.js'} 
19:33:20 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

19:33:20 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}">
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:33:20 完整请求
19:33:20 请求结束
19:33:20 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:33:20 path and query /api/weibo/all {} 
19:33:20 kwargs,  {'weibo_id': 1} <class 'dict'>
19:33:20 kwargs,  {'weibo_id': 2} <class 'dict'>
19:33:20 kwargs,  {'weibo_id': 3} <class 'dict'>
19:33:20 kwargs,  {'weibo_id': 6} <class 'dict'>
19:33:20 kwargs,  {'weibo_id': 7} <class 'dict'>
19:33:20 kwargs,  {'weibo_id': 8} <class 'dict'>
19:33:20 kwargs,  {'weibo_id': 9} <class 'dict'>
19:33:20 kwargs,  {'weibo_id': 10} <class 'dict'>
19:33:20 kwargs,  {'weibo_id': 11} <class 'dict'>
19:33:20 kwargs,  {'weibo_id': 12} <class 'dict'>
19:33:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 9,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 10,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 11,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 12,
    "comments": [],
    "content": "fegvdffgrwtrg"
  }
]
19:33:21 完整请求
19:33:21 请求结束
19:33:21 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:33:21 path and query /static {'file': 'weibo.js'} 
19:33:21 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}">
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:33:25 完整请求
19:33:25 请求结束
19:33:25 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:33:25 path and query /api/weibo/delete {'id': '12'} 
19:33:25 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:33:26 完整请求
19:33:26 请求结束
19:33:26 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:33:26 path and query /api/weibo/delete {'id': '11'} 
19:33:26 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:35:47 完整请求
19:35:47 请求结束
19:35:47 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:35:47 path and query /weibo/index {} 
19:35:47 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:35:47 完整请求
19:35:47 请求结束
19:35:47 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:35:47 path and query /static {'file': 'gua.js'} 
19:35:47 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

19:35:47 完整请求
19:35:47 请求结束
19:35:47 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:35:47 path and query /static {'file': 'weibo.js'} 
19:35:47 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:35:47 完整请求
19:35:47 请求结束
19:35:47 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:35:47 path and query /api/weibo/all {} 
19:35:47 kwargs,  {'weibo_id': 1} <class 'dict'>
19:35:47 kwargs,  {'weibo_id': 2} <class 'dict'>
19:35:47 kwargs,  {'weibo_id': 3} <class 'dict'>
19:35:47 kwargs,  {'weibo_id': 6} <class 'dict'>
19:35:47 kwargs,  {'weibo_id': 7} <class 'dict'>
19:35:47 kwargs,  {'weibo_id': 8} <class 'dict'>
19:35:47 kwargs,  {'weibo_id': 9} <class 'dict'>
19:35:47 kwargs,  {'weibo_id': 10} <class 'dict'>
19:35:47 kwargs,  {'weibo_id': 11} <class 'dict'>
19:35:47 kwargs,  {'weibo_id': 12} <class 'dict'>
19:35:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 9,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 10,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 11,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 12,
    "comments": [],
    "content": "fegvdffgrwtrg"
  }
]
19:35:48 完整请求
19:35:48 请求结束
19:35:48 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:35:48 path and query /static {'file': 'weibo.js'} 
19:35:48 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:35:50 完整请求
19:35:50 请求结束
19:35:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:35:50 path and query /api/weibo/delete {'id': '12'} 
19:35:50 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:35:53 完整请求
19:35:53 请求结束
19:35:53 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:35:53 path and query /api/weibo/delete {'id': '11'} 
19:35:53 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:35:54 完整请求
19:35:54 请求结束
19:35:54 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:35:54 path and query /api/weibo/delete {'id': '10'} 
19:35:54 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:38:18 完整请求
19:38:18 请求结束
19:38:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:38:18 path and query /weibo/index {} 
19:38:18 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:38:18 完整请求
19:38:18 完整请求
19:38:18 请求结束
19:38:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:38:18 path and query /static {'file': 'weibo.js'} 
19:38:18 请求结束
19:38:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:38:18 path and query /static {'file': 'gua.js'} 
19:38:18 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:38:18 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    log('path', path)
    ajax('GET', path, '', callback)
}

19:38:18 完整请求
19:38:18 请求结束
19:38:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:38:18 path and query /api/weibo/all {} 
19:38:18 kwargs,  {'weibo_id': 1} <class 'dict'>
19:38:18 kwargs,  {'weibo_id': 2} <class 'dict'>
19:38:18 kwargs,  {'weibo_id': 3} <class 'dict'>
19:38:18 kwargs,  {'weibo_id': 6} <class 'dict'>
19:38:18 kwargs,  {'weibo_id': 7} <class 'dict'>
19:38:18 kwargs,  {'weibo_id': 8} <class 'dict'>
19:38:18 kwargs,  {'weibo_id': 9} <class 'dict'>
19:38:18 kwargs,  {'weibo_id': 10} <class 'dict'>
19:38:18 kwargs,  {'weibo_id': 11} <class 'dict'>
19:38:18 kwargs,  {'weibo_id': 12} <class 'dict'>
19:38:18 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 9,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 10,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 11,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 12,
    "comments": [],
    "content": "fegvdffgrwtrg"
  }
]
19:38:19 完整请求
19:38:19 请求结束
19:38:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:38:19 path and query /static {'file': 'weibo.js'} 
19:38:19 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:38:22 完整请求
19:38:22 请求结束
19:38:22 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:38:22 path and query /api/weibo/delete {'id': '12'} 
19:38:22 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:38:26 完整请求
19:38:26 请求结束
19:38:26 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:38:26 path and query /api/weibo/delete {'id': '11'} 
19:38:26 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:38:32 完整请求
19:38:32 请求结束
19:38:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:38:32 path and query /api/weibo/delete {'id': '10'} 
19:38:32 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:38:40 完整请求
19:38:40 请求结束
19:38:40 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:38:40 path and query /api/todo/delete {'id': '7'} 
19:38:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "title": "re",
  "completed": false,
  "ct": 1545996671,
  "id": 7,
  "ut": 1545996671
}
19:39:30 完整请求
19:39:30 请求结束
19:39:30 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:39:30 path and query /weibo/index {} 
19:39:30 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:39:30 完整请求
19:39:30 完整请求
19:39:30 请求结束
19:39:30 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:39:30 path and query /static {'file': 'weibo.js'} 
19:39:30 请求结束
19:39:30 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:39:30 path and query /static {'file': 'gua.js'} 
19:39:30 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:39:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

19:39:31 完整请求
19:39:31 请求结束
19:39:31 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:39:31 path and query /api/weibo/all {} 
19:39:31 kwargs,  {'weibo_id': 1} <class 'dict'>
19:39:31 kwargs,  {'weibo_id': 2} <class 'dict'>
19:39:31 kwargs,  {'weibo_id': 3} <class 'dict'>
19:39:31 kwargs,  {'weibo_id': 6} <class 'dict'>
19:39:31 kwargs,  {'weibo_id': 7} <class 'dict'>
19:39:31 kwargs,  {'weibo_id': 8} <class 'dict'>
19:39:31 kwargs,  {'weibo_id': 9} <class 'dict'>
19:39:31 kwargs,  {'weibo_id': 10} <class 'dict'>
19:39:31 kwargs,  {'weibo_id': 11} <class 'dict'>
19:39:31 kwargs,  {'weibo_id': 12} <class 'dict'>
19:39:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 9,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 10,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 11,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 12,
    "comments": [],
    "content": "fegvdffgrwtrg"
  }
]
19:39:31 完整请求
19:39:31 请求结束
19:39:31 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:39:31 path and query /static {'file': 'weibo.js'} 
19:39:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:39:34 完整请求
19:39:34 请求结束
19:39:34 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:39:34 path and query /api/weibo/delete {'id': '12'} 
19:39:34 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:39:39 完整请求
19:39:39 请求结束
19:39:39 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:39:39 path and query /api/weibo/delete {'id': '11'} 
19:39:39 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:40:27 完整请求
19:40:27 请求结束
19:40:27 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:40:27 path and query /weibo/index {} 
19:40:27 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:40:27 完整请求
19:40:27 完整请求
19:40:27 请求结束
19:40:27 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:40:27 path and query /static {'file': 'weibo.js'} 
19:40:27 请求结束
19:40:27 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:40:27 path and query /static {'file': 'gua.js'} 
19:40:27 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:40:27 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log(r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

19:40:27 完整请求
19:40:27 请求结束
19:40:27 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:40:27 path and query /api/weibo/all {} 
19:40:27 kwargs,  {'weibo_id': 1} <class 'dict'>
19:40:27 kwargs,  {'weibo_id': 2} <class 'dict'>
19:40:27 kwargs,  {'weibo_id': 3} <class 'dict'>
19:40:27 kwargs,  {'weibo_id': 6} <class 'dict'>
19:40:27 kwargs,  {'weibo_id': 7} <class 'dict'>
19:40:27 kwargs,  {'weibo_id': 8} <class 'dict'>
19:40:27 kwargs,  {'weibo_id': 9} <class 'dict'>
19:40:27 kwargs,  {'weibo_id': 10} <class 'dict'>
19:40:27 kwargs,  {'weibo_id': 11} <class 'dict'>
19:40:27 kwargs,  {'weibo_id': 12} <class 'dict'>
19:40:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 9,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 10,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 11,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 12,
    "comments": [],
    "content": "fegvdffgrwtrg"
  }
]
19:40:28 完整请求
19:40:28 请求结束
19:40:28 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:40:28 path and query /static {'file': 'weibo.js'} 
19:40:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:40:39 完整请求
19:40:39 请求结束
19:40:39 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:40:39 path and query /api/weibo/delete {'id': '12'} 
19:40:39 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:40:43 完整请求
19:40:43 请求结束
19:40:43 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:40:43 path and query /api/weibo/delete {'id': '11'} 
19:40:43 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
19:41:11 完整请求
19:41:11 请求结束
19:41:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:41:11 path and query /weibo/index {} 
19:41:11 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:41:11 完整请求
19:41:11 请求结束
19:41:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:41:11 path and query /static {'file': 'gua.js'} 
19:41:11 完整请求
19:41:11 请求结束
19:41:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:41:11 path and query /static {'file': 'weibo.js'} 
19:41:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

19:41:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:41:11 完整请求
19:41:11 请求结束
19:41:11 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:41:11 path and query /api/weibo/all {} 
19:41:11 kwargs,  {'weibo_id': 1} <class 'dict'>
19:41:11 kwargs,  {'weibo_id': 2} <class 'dict'>
19:41:11 kwargs,  {'weibo_id': 3} <class 'dict'>
19:41:11 kwargs,  {'weibo_id': 6} <class 'dict'>
19:41:11 kwargs,  {'weibo_id': 7} <class 'dict'>
19:41:11 kwargs,  {'weibo_id': 8} <class 'dict'>
19:41:11 kwargs,  {'weibo_id': 9} <class 'dict'>
19:41:11 kwargs,  {'weibo_id': 10} <class 'dict'>
19:41:11 kwargs,  {'weibo_id': 11} <class 'dict'>
19:41:11 kwargs,  {'weibo_id': 12} <class 'dict'>
19:41:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 9,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 10,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 11,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 12,
    "comments": [],
    "content": "fegvdffgrwtrg"
  }
]
19:41:12 完整请求
19:41:12 请求结束
19:41:12 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:41:12 path and query /static {'file': 'weibo.js'} 
19:41:12 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

19:41:16 完整请求
19:41:16 请求结束
19:41:16 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
19:41:16 path and query /api/weibo/delete {'id': '12'} 
19:41:16 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>

20:59:42 完整请求
20:59:42 请求结束
20:59:42 cookie ['Pycharm-df207d35=600adc10-1f5d-46ff-b99f-861b091847e7']
20:59:42 path and query /api/todo/delete {'id': '6'}
20:59:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1488977269,
  "id": 6,
  "ct": 1488977269,
  "title": "123",
  "completed": false
}22:14:30 完整请求
22:14:30 请求结束
22:14:30 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:14:30 path and query /weibo/index {} 
22:14:30 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:14:31 完整请求
22:14:31 请求结束
22:14:31 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:14:31 path and query /static {'file': 'gua.js'} 
22:14:31 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

22:14:31 完整请求
22:14:31 请求结束
22:14:31 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:14:31 path and query /static {'file': 'weibo.js'} 
22:14:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:14:31 完整请求
22:14:31 请求结束
22:14:31 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:14:31 path and query /api/weibo/all {} 
22:14:31 kwargs,  {'weibo_id': 1} <class 'dict'>
22:14:31 kwargs,  {'weibo_id': 2} <class 'dict'>
22:14:31 kwargs,  {'weibo_id': 3} <class 'dict'>
22:14:31 kwargs,  {'weibo_id': 6} <class 'dict'>
22:14:31 kwargs,  {'weibo_id': 7} <class 'dict'>
22:14:31 kwargs,  {'weibo_id': 8} <class 'dict'>
22:14:31 kwargs,  {'weibo_id': 9} <class 'dict'>
22:14:31 kwargs,  {'weibo_id': 10} <class 'dict'>
22:14:31 kwargs,  {'weibo_id': 11} <class 'dict'>
22:14:31 kwargs,  {'weibo_id': 12} <class 'dict'>
22:14:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 9,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 10,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 11,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 12,
    "comments": [],
    "content": "fegvdffgrwtrg"
  }
]
22:14:32 完整请求
22:14:32 请求结束
22:14:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:14:32 path and query /static {'file': 'weibo.js'} 
22:14:32 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:14:35 完整请求
22:14:35 请求结束
22:14:35 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:14:35 path and query /api/weibo/delete {'id': '12'} 
22:14:35 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:14:35 完整请求
22:14:35 请求结束
22:14:35 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:14:35 path and query /api/weibo/delete {'id': '11'} 
22:14:35 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:14:37 完整请求
22:14:37 请求结束
22:14:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:14:37 path and query /api/weibo/delete {'id': '10'} 
22:14:37 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:14:39 完整请求
22:14:39 请求结束
22:14:39 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:14:39 path and query /api/weibo/delete {'id': '9'} 
22:14:39 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:17:01 完整请求
22:17:01 请求结束
22:17:01 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:17:01 path and query /weibo/index {} 
22:17:01 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:17:02 完整请求
22:17:02 请求结束
22:17:02 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:17:02 path and query /static {'file': 'gua.js'} 
22:17:02 完整请求
22:17:02 请求结束
22:17:02 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:17:02 path and query /static {'file': 'weibo.js'} 
22:17:02 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:17:02 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

22:17:02 完整请求
22:17:02 请求结束
22:17:02 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:17:02 path and query /api/weibo/all {} 
22:17:02 kwargs,  {'weibo_id': 1} <class 'dict'>
22:17:02 kwargs,  {'weibo_id': 2} <class 'dict'>
22:17:02 kwargs,  {'weibo_id': 3} <class 'dict'>
22:17:02 kwargs,  {'weibo_id': 6} <class 'dict'>
22:17:02 kwargs,  {'weibo_id': 7} <class 'dict'>
22:17:02 kwargs,  {'weibo_id': 8} <class 'dict'>
22:17:02 kwargs,  {'weibo_id': 9} <class 'dict'>
22:17:02 kwargs,  {'weibo_id': 10} <class 'dict'>
22:17:02 kwargs,  {'weibo_id': 11} <class 'dict'>
22:17:02 kwargs,  {'weibo_id': 12} <class 'dict'>
22:17:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 9,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 10,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 11,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 12,
    "comments": [],
    "content": "fegvdffgrwtrg"
  }
]
22:17:02 完整请求
22:17:02 请求结束
22:17:02 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:17:02 path and query /static {'file': 'weibo.js'} 
22:17:02 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:17:05 完整请求
22:17:05 请求结束
22:17:05 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:17:05 path and query /api/weibo/delete {'id': '12'} 
22:17:05 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:20:31 完整请求
22:20:31 请求结束
22:20:31 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:20:31 path and query /weibo/index {} 
22:20:31 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:20:31 完整请求
22:20:31 请求结束
22:20:31 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:20:31 path and query /static {'file': 'gua.js'} 
22:20:31 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

22:20:31 完整请求
22:20:31 请求结束
22:20:31 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:20:31 path and query /static {'file': 'weibo.js'} 
22:20:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:20:31 完整请求
22:20:31 请求结束
22:20:31 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:20:31 path and query /api/weibo/all {} 
22:20:31 kwargs,  {'weibo_id': 1} <class 'dict'>
22:20:31 kwargs,  {'weibo_id': 2} <class 'dict'>
22:20:31 kwargs,  {'weibo_id': 3} <class 'dict'>
22:20:31 kwargs,  {'weibo_id': 6} <class 'dict'>
22:20:31 kwargs,  {'weibo_id': 7} <class 'dict'>
22:20:31 kwargs,  {'weibo_id': 8} <class 'dict'>
22:20:31 kwargs,  {'weibo_id': 9} <class 'dict'>
22:20:31 kwargs,  {'weibo_id': 10} <class 'dict'>
22:20:31 kwargs,  {'weibo_id': 11} <class 'dict'>
22:20:31 kwargs,  {'weibo_id': 12} <class 'dict'>
22:20:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 9,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 10,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 11,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 12,
    "comments": [],
    "content": "fegvdffgrwtrg"
  }
]
22:20:32 完整请求
22:20:32 请求结束
22:20:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:20:32 path and query /static {'file': 'weibo.js'} 
22:20:32 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:20:36 完整请求
22:20:36 请求结束
22:20:36 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:20:36 path and query /api/weibo/delete {'id': '12'} 
22:20:36 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:20:38 完整请求
22:20:38 请求结束
22:20:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:20:38 path and query /api/weibo/delete {'id': '11'} 
22:20:38 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:22:21 完整请求
22:22:21 请求结束
22:22:21 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:22:21 path and query /weibo/index {} 
22:22:21 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:22:21 完整请求
22:22:21 请求结束
22:22:21 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:22:21 path and query /static {'file': 'gua.js'} 
22:22:21 完整请求
22:22:21 请求结束
22:22:21 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:22:21 path and query /static {'file': 'weibo.js'} 
22:22:21 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

22:22:21 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:22:21 完整请求
22:22:21 请求结束
22:22:21 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:22:21 path and query /api/weibo/all {} 
22:22:21 kwargs,  {'weibo_id': 1} <class 'dict'>
22:22:21 kwargs,  {'weibo_id': 2} <class 'dict'>
22:22:21 kwargs,  {'weibo_id': 3} <class 'dict'>
22:22:21 kwargs,  {'weibo_id': 6} <class 'dict'>
22:22:21 kwargs,  {'weibo_id': 7} <class 'dict'>
22:22:21 kwargs,  {'weibo_id': 8} <class 'dict'>
22:22:21 kwargs,  {'weibo_id': 9} <class 'dict'>
22:22:21 kwargs,  {'weibo_id': 10} <class 'dict'>
22:22:21 kwargs,  {'weibo_id': 11} <class 'dict'>
22:22:21 kwargs,  {'weibo_id': 12} <class 'dict'>
22:22:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 9,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 10,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 11,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 12,
    "comments": [],
    "content": "fegvdffgrwtrg"
  }
]
22:22:22 完整请求
22:22:22 请求结束
22:22:22 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:22:22 path and query /static {'file': 'weibo.js'} 
22:22:22 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:22:26 完整请求
22:22:26 请求结束
22:22:26 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:22:26 path and query /api/weibo/delete {'id': '12'} 
22:22:26 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:22:27 完整请求
22:22:27 请求结束
22:22:27 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:22:27 path and query /api/weibo/delete {'id': '11'} 
22:22:27 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:25:42 完整请求
22:25:42 请求结束
22:25:42 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:25:42 path and query /weibo/index {} 
22:25:42 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:25:43 完整请求
22:25:43 请求结束
22:25:43 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:25:43 path and query /static {'file': 'gua.js'} 
22:25:43 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

22:25:43 完整请求
22:25:43 请求结束
22:25:43 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:25:43 path and query /static {'file': 'weibo.js'} 
22:25:43 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:25:43 完整请求
22:25:43 请求结束
22:25:43 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:25:43 path and query /api/weibo/all {} 
22:25:43 kwargs,  {'weibo_id': 1} <class 'dict'>
22:25:43 kwargs,  {'weibo_id': 2} <class 'dict'>
22:25:43 kwargs,  {'weibo_id': 3} <class 'dict'>
22:25:43 kwargs,  {'weibo_id': 6} <class 'dict'>
22:25:43 kwargs,  {'weibo_id': 7} <class 'dict'>
22:25:43 kwargs,  {'weibo_id': 8} <class 'dict'>
22:25:43 kwargs,  {'weibo_id': 9} <class 'dict'>
22:25:43 kwargs,  {'weibo_id': 10} <class 'dict'>
22:25:43 kwargs,  {'weibo_id': 11} <class 'dict'>
22:25:43 kwargs,  {'weibo_id': 12} <class 'dict'>
22:25:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "comments": [
      {
        "weibo_id": 1,
        "id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "weibo_id": 1,
        "id": 2,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "id": 1,
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "comments": [
      {
        "weibo_id": 2,
        "id": 3,
        "user_id": 1,
        "content": "hello"
      },
      {
        "weibo_id": 2,
        "id": 4,
        "user_id": 1,
        "content": "123"
      },
      {
        "weibo_id": 2,
        "id": 5,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "weibo_id": 2,
        "id": 7,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "weibo_id": 2,
        "id": 8,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "id": 2,
    "user_id": 1,
    "content": "你好"
  },
  {
    "comments": [
      {
        "weibo_id": 3,
        "id": 6,
        "user_id": 1,
        "content": "123"
      }
    ],
    "id": 3,
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "id": 6,
    "comments": [],
    "content": "dsafddf"
  },
  {
    "id": 7,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 8,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 9,
    "comments": [],
    "content": "fegvdf"
  },
  {
    "id": 10,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 11,
    "comments": [],
    "content": "fegvdffgrwtrg"
  },
  {
    "id": 12,
    "comments": [],
    "content": "fegvdffgrwtrg"
  }
]
22:25:44 完整请求
22:25:44 请求结束
22:25:44 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:25:44 path and query /static {'file': 'weibo.js'} 
22:25:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:25:46 完整请求
22:25:46 请求结束
22:25:46 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:25:46 path and query /api/weibo/delete {'id': '10'} 
22:25:46 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:25:47 完整请求
22:25:47 请求结束
22:25:47 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:25:47 path and query /api/weibo/delete {'id': '11'} 
22:25:47 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
22:29:39 完整请求
22:29:39 请求结束
22:29:39 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:29:39 path and query and req /weibo/index {} 
22:29:39 request.body 
22:29:39 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:29:39 完整请求
22:29:39 完整请求
22:29:39 请求结束
22:29:39 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:29:39 path and query and req /static {'file': 'gua.js'} 
22:29:39 request.body 
22:29:39 请求结束
22:29:39 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:29:39 path and query and req /static {'file': 'weibo.js'} 
22:29:39 request.body 
22:29:39 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

22:29:39 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:29:39 完整请求
22:29:39 请求结束
22:29:39 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:29:39 path and query and req /api/weibo/all {} 
22:29:39 request.body 
22:29:39 kwargs,  {'weibo_id': 1} <class 'dict'>
22:29:39 kwargs,  {'weibo_id': 2} <class 'dict'>
22:29:39 kwargs,  {'weibo_id': 3} <class 'dict'>
22:29:39 kwargs,  {'weibo_id': 6} <class 'dict'>
22:29:39 kwargs,  {'weibo_id': 7} <class 'dict'>
22:29:39 kwargs,  {'weibo_id': 8} <class 'dict'>
22:29:39 kwargs,  {'weibo_id': 9} <class 'dict'>
22:29:39 kwargs,  {'weibo_id': 10} <class 'dict'>
22:29:39 kwargs,  {'weibo_id': 11} <class 'dict'>
22:29:39 kwargs,  {'weibo_id': 12} <class 'dict'>
22:29:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "comments": [
      {
        "id": 1,
        "weibo_id": 1,
        "user_id": 2,
        "content": "楼主说得对"
      },
      {
        "id": 2,
        "weibo_id": 1,
        "user_id": 1,
        "content": "lbvu is right"
      }
    ],
    "user_id": 1,
    "content": "hello tweet"
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "weibo_id": 2,
        "user_id": 1,
        "content": "hello"
      },
      {
        "id": 4,
        "weibo_id": 2,
        "user_id": 1,
        "content": "123"
      },
      {
        "id": 5,
        "weibo_id": 2,
        "user_id": 1,
        "content": "asdf"
      },
      {
        "id": 7,
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好"
      },
      {
        "id": 8,
        "weibo_id": 2,
        "user_id": 2,
        "content": "说得好"
      }
    ],
    "user_id": 1,
    "content": "你好"
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "weibo_id": 3,
        "user_id": 1,
        "content": "123"
      }
    ],
    "user_id": 1,
    "content": "hahaha"
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 8,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 9,
    "comments": []
  },
  {
    "content": "fegvdffgrwtrg",
    "id": 10,
    "comments": []
  },
  {
    "content": "fegvdffgrwtrg",
    "id": 11,
    "comments": []
  },
  {
    "content": "fegvdffgrwtrg",
    "id": 12,
    "comments": []
  }
]
22:29:40 完整请求
22:29:40 请求结束
22:29:40 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:29:40 path and query and req /static {'file': 'weibo.js'} 
22:29:40 request.body 
22:29:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:29:42 完整请求
22:29:42 请求结束
22:29:42 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:29:42 path and query and req /api/weibo/delete {'id': '10'} 
22:29:42 request.body 
22:29:42 deleted_id 10
22:29:42 当前id 10
22:29:42 kwargs,  {'weibo_id': 10} <class 'dict'>
22:29:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "fegvdffgrwtrg",
  "id": 10,
  "comments": []
}
22:29:44 完整请求
22:29:44 请求结束
22:29:44 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:29:44 path and query and req /api/weibo/delete {'id': '11'} 
22:29:44 request.body 
22:29:44 deleted_id 11
22:29:44 当前id 11
22:29:44 kwargs,  {'weibo_id': 11} <class 'dict'>
22:29:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "fegvdffgrwtrg",
  "id": 11,
  "comments": []
}
22:29:49 完整请求
22:29:49 请求结束
22:29:49 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:29:49 path and query and req /api/weibo/delete {'id': '9'} 
22:29:49 request.body 
22:29:49 deleted_id 9
22:29:49 当前id 9
22:29:49 kwargs,  {'weibo_id': 9} <class 'dict'>
22:29:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "fegvdf",
  "id": 9,
  "comments": []
}
22:30:09 完整请求
22:30:09 请求结束
22:30:09 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:30:09 path and query and req /api/weibo/delete {'id': '12'} 
22:30:09 request.body 
22:30:09 deleted_id 12
22:30:09 当前id 12
22:30:09 kwargs,  {'weibo_id': 12} <class 'dict'>
22:30:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "fegvdffgrwtrg",
  "id": 12,
  "comments": []
}
22:30:20 完整请求
22:30:20 请求结束
22:30:20 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:30:20 path and query and req /api/weibo/delete {'id': '8'} 
22:30:20 request.body 
22:30:20 deleted_id 8
22:30:20 当前id 8
22:30:20 kwargs,  {'weibo_id': 8} <class 'dict'>
22:30:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "fegvdf",
  "id": 8,
  "comments": []
}
22:35:14 完整请求
22:35:14 请求结束
22:35:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:35:14 path and query /weibo/index {} 
22:35:14 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:35:14 完整请求
22:35:14 请求结束
22:35:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:35:14 path and query /static {'file': 'gua.js'} 
22:35:14 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

22:35:14 完整请求
22:35:14 请求结束
22:35:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:35:14 path and query /static {'file': 'weibo.js'} 
22:35:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:35:14 完整请求
22:35:14 请求结束
22:35:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:35:14 path and query /api/weibo/all {} 
22:35:14 kwargs,  {'weibo_id': 1} <class 'dict'>
22:35:14 kwargs,  {'weibo_id': 2} <class 'dict'>
22:35:14 kwargs,  {'weibo_id': 3} <class 'dict'>
22:35:14 kwargs,  {'weibo_id': 6} <class 'dict'>
22:35:14 kwargs,  {'weibo_id': 7} <class 'dict'>
22:35:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  }
]
22:35:29 完整请求
22:35:29 请求结束
22:35:29 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:35:29 path and query /api/todo/update {} {"id":"5","title":"fsddf"}
22:35:29 kwargs,  {'id': 5} <class 'dict'>
22:35:29 debug 0
22:35:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1546180529,
  "title": "fsddf",
  "completed": false,
  "id": 5,
  "ct": 1545979581
}
22:35:32 完整请求
22:35:32 请求结束
22:35:32 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:35:32 path and query /api/todo/update {} {"id":"5","title":"fsddf"}
22:35:32 kwargs,  {'id': 5} <class 'dict'>
22:35:32 debug 0
22:35:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1546180532,
  "title": "fsddf",
  "completed": false,
  "id": 5,
  "ct": 1545979581
}
22:35:33 完整请求
22:35:33 请求结束
22:35:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:35:33 path and query /api/todo/update {} {"id":"5","title":"fsddf"}
22:35:33 kwargs,  {'id': 5} <class 'dict'>
22:35:33 debug 0
22:35:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1546180533,
  "title": "fsddf",
  "completed": false,
  "id": 5,
  "ct": 1545979581
}
22:35:34 完整请求
22:35:34 请求结束
22:35:34 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:35:34 path and query /api/todo/update {} {"id":"5","title":"dfwfdw"}
22:35:34 kwargs,  {'id': 5} <class 'dict'>
22:35:34 debug 0
22:35:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1546180534,
  "title": "dfwfdw",
  "completed": false,
  "id": 5,
  "ct": 1545979581
}
22:35:37 完整请求
22:35:37 请求结束
22:35:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:35:37 path and query /api/todo/delete {'id': '5'} 
22:35:37 当前id 5
22:35:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1546180534,
  "title": "dfwfdw",
  "completed": false,
  "id": 5,
  "ct": 1545979581
}
22:38:38 完整请求
22:38:38 请求结束
22:38:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:38:38 path and query /weibo/index {} 
22:38:38 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:38:38 完整请求
22:38:38 请求结束
22:38:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:38:38 path and query /static {'file': 'gua.js'} 
22:38:38 完整请求
22:38:38 请求结束
22:38:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:38:38 path and query /static {'file': 'weibo.js'} 
22:38:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

22:38:38 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='Weibo-edit-form'>
            <input class="Weibo-edit-input">
            <button class='Weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
//    bindEventWeiboEdit()
//    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:38:38 完整请求
22:38:38 请求结束
22:38:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:38:38 path and query /api/weibo/all {} 
22:38:38 kwargs,  {'weibo_id': 1} <class 'dict'>
22:38:38 kwargs,  {'weibo_id': 2} <class 'dict'>
22:38:38 kwargs,  {'weibo_id': 3} <class 'dict'>
22:38:38 kwargs,  {'weibo_id': 6} <class 'dict'>
22:38:38 kwargs,  {'weibo_id': 7} <class 'dict'>
22:38:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  }
]
22:45:03 完整请求
22:45:03 请求结束
22:45:03 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:45:03 path and query /weibo/index {} 
22:45:03 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:45:03 完整请求
22:45:03 请求结束
22:45:03 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:45:03 path and query /static {'file': 'gua.js'} 
22:45:03 完整请求
22:45:03 请求结束
22:45:03 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:45:03 path and query /static {'file': 'weibo.js'} 
22:45:03 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

22:45:03 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:45:17 完整请求
22:45:17 请求结束
22:45:17 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:45:17 path and query /static {'file': 'weibo.js'} 
22:45:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:45:29 完整请求
22:45:29 请求结束
22:45:29 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:45:29 path and query /weibo/index {} 
22:45:29 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:45:30 完整请求
22:45:30 请求结束
22:45:30 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:45:30 path and query /static {'file': 'gua.js'} 
22:45:30 完整请求
22:45:30 请求结束
22:45:30 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:45:30 path and query /static {'file': 'weibo.js'} 
22:45:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

22:45:30 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    //bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:45:30 完整请求
22:45:30 请求结束
22:45:30 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:45:30 path and query /api/weibo/all {} 
22:45:30 kwargs,  {'weibo_id': 1} <class 'dict'>
22:45:30 kwargs,  {'weibo_id': 2} <class 'dict'>
22:45:30 kwargs,  {'weibo_id': 3} <class 'dict'>
22:45:30 kwargs,  {'weibo_id': 6} <class 'dict'>
22:45:30 kwargs,  {'weibo_id': 7} <class 'dict'>
22:45:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  }
]
22:45:31 完整请求
22:45:31 请求结束
22:45:31 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:45:31 path and query /static {'file': 'weibo.js'} 
22:45:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    //bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:45:43 完整请求
22:45:43 请求结束
22:45:43 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:45:43 path and query /weibo/index {} 
22:45:43 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:45:43 完整请求
22:45:43 请求结束
22:45:43 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:45:43 path and query /static {'file': 'gua.js'} 
22:45:43 完整请求
22:45:43 请求结束
22:45:43 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:45:43 path and query /static {'file': 'weibo.js'} 
22:45:43 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

22:45:43 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    //bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:45:43 完整请求
22:45:43 请求结束
22:45:43 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:45:43 path and query /api/weibo/all {} 
22:45:43 kwargs,  {'weibo_id': 1} <class 'dict'>
22:45:43 kwargs,  {'weibo_id': 2} <class 'dict'>
22:45:43 kwargs,  {'weibo_id': 3} <class 'dict'>
22:45:43 kwargs,  {'weibo_id': 6} <class 'dict'>
22:45:43 kwargs,  {'weibo_id': 7} <class 'dict'>
22:45:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  }
]
22:45:44 完整请求
22:45:44 请求结束
22:45:44 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:45:44 path and query /static {'file': 'weibo.js'} 
22:45:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <div>
                [WEIBO]: ${content}
            </div>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.Weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('Weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.Weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.Weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'title': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#Weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.Weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    //bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:47:57 完整请求
22:47:57 请求结束
22:47:57 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:47:57 path and query /api/todo/update {} {"id":"6","title":"fwdwfw"}
22:47:57 kwargs,  {'id': 6} <class 'dict'>
22:47:57 debug 0
22:47:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "ut": 1546181277,
  "title": "fwdwfw",
  "completed": false,
  "id": 6,
  "ct": 1545995725
}
22:52:19 完整请求
22:52:19 请求结束
22:52:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:52:19 path and query /api/weibo/add {} {"content":"nihao"}
22:52:19 kwargs,  {'weibo_id': 8} <class 'dict'>
22:52:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "nihao",
  "id": 8,
  "comments": []
}
22:56:25 完整请求
22:56:25 请求结束
22:56:25 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:56:25 path and query /weibo/index {} 
22:56:25 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
22:56:25 完整请求
22:56:25 请求结束
22:56:25 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:56:25 path and query /static {'file': 'gua.js'} 
22:56:25 完整请求
22:56:25 请求结束
22:56:25 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:56:25 path and query /static {'file': 'weibo.js'} 
22:56:25 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='todo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    //bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

22:56:25 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

22:56:25 完整请求
22:56:25 请求结束
22:56:25 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:56:25 path and query /api/weibo/all {} 
22:56:25 kwargs,  {'weibo_id': 1} <class 'dict'>
22:56:25 kwargs,  {'weibo_id': 2} <class 'dict'>
22:56:25 kwargs,  {'weibo_id': 3} <class 'dict'>
22:56:25 kwargs,  {'weibo_id': 6} <class 'dict'>
22:56:25 kwargs,  {'weibo_id': 7} <class 'dict'>
22:56:25 kwargs,  {'weibo_id': 8} <class 'dict'>
22:56:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "nihao",
    "id": 8,
    "comments": []
  }
]
22:56:26 完整请求
22:56:26 请求结束
22:56:26 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
22:56:26 path and query /static {'file': 'weibo.js'} 
22:56:26 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='todo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    //bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:01:57 完整请求
23:01:57 请求结束
23:01:57 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:01:57 path and query /weibo/index {} 
23:01:57 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:01:58 完整请求
23:01:58 请求结束
23:01:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:01:58 path and query /static {'file': 'gua.js'} 
23:01:58 完整请求
23:01:58 请求结束
23:01:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:01:58 path and query /static {'file': 'weibo.js'} 
23:01:58 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

23:01:58 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='todo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    //bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:01:58 完整请求
23:01:58 请求结束
23:01:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:01:58 path and query /api/weibo/all {} 
23:01:58 kwargs,  {'weibo_id': 1} <class 'dict'>
23:01:58 kwargs,  {'weibo_id': 2} <class 'dict'>
23:01:58 kwargs,  {'weibo_id': 3} <class 'dict'>
23:01:58 kwargs,  {'weibo_id': 6} <class 'dict'>
23:01:58 kwargs,  {'weibo_id': 7} <class 'dict'>
23:01:58 kwargs,  {'weibo_id': 8} <class 'dict'>
23:01:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "nihao",
    "id": 8,
    "comments": []
  }
]
23:01:58 完整请求
23:01:58 请求结束
23:01:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:01:58 path and query /static {'file': 'weibo.js'} 
23:01:58 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='todo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    //bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:02:53 完整请求
23:02:53 请求结束
23:02:53 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:02:53 path and query /weibo/index {} 
23:02:53 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:02:53 完整请求
23:02:53 请求结束
23:02:53 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:02:53 path and query /static {'file': 'gua.js'} 
23:02:53 完整请求
23:02:53 请求结束
23:02:53 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:02:53 path and query /static {'file': 'weibo.js'} 
23:02:53 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

23:02:53 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='todo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    //bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:02:53 完整请求
23:02:53 请求结束
23:02:53 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:02:53 path and query /api/weibo/all {} 
23:02:53 kwargs,  {'weibo_id': 1} <class 'dict'>
23:02:53 kwargs,  {'weibo_id': 2} <class 'dict'>
23:02:53 kwargs,  {'weibo_id': 3} <class 'dict'>
23:02:53 kwargs,  {'weibo_id': 6} <class 'dict'>
23:02:53 kwargs,  {'weibo_id': 7} <class 'dict'>
23:02:53 kwargs,  {'weibo_id': 8} <class 'dict'>
23:02:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "nihao",
    "id": 8,
    "comments": []
  }
]
23:02:54 完整请求
23:02:54 请求结束
23:02:54 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:02:54 path and query /static {'file': 'weibo.js'} 
23:02:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='todo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    //bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:03:33 完整请求
23:03:33 请求结束
23:03:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:03:33 path and query /weibo/index {} 
23:03:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:03:33 完整请求
23:03:33 请求结束
23:03:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:03:33 path and query /static {'file': 'gua.js'} 
23:03:33 完整请求
23:03:33 请求结束
23:03:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:03:33 path and query /static {'file': 'weibo.js'} 
23:03:33 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

23:03:33 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='todo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:03:33 完整请求
23:03:33 请求结束
23:03:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:03:33 path and query /api/weibo/all {} 
23:03:33 kwargs,  {'weibo_id': 1} <class 'dict'>
23:03:33 kwargs,  {'weibo_id': 2} <class 'dict'>
23:03:33 kwargs,  {'weibo_id': 3} <class 'dict'>
23:03:33 kwargs,  {'weibo_id': 6} <class 'dict'>
23:03:33 kwargs,  {'weibo_id': 7} <class 'dict'>
23:03:33 kwargs,  {'weibo_id': 8} <class 'dict'>
23:03:33 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "nihao",
    "id": 8,
    "comments": []
  }
]
23:03:34 完整请求
23:03:34 请求结束
23:03:34 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:03:34 path and query /static {'file': 'weibo.js'} 
23:03:34 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='todo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:03:53 完整请求
23:03:53 请求结束
23:03:53 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:03:53 path and query /api/weibo/update {} {"id":"8","content":"你好"}
23:03:53 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
23:04:50 完整请求
23:04:50 请求结束
23:06:37 完整请求
23:06:37 请求结束
23:06:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:06:37 path and query /weibo/index {} 
23:06:37 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
23:06:38 完整请求
23:06:38 请求结束
23:06:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:06:38 path and query /static {'file': 'gua.js'} 
23:06:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

23:06:38 完整请求
23:06:38 请求结束
23:06:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:06:38 path and query /static {'file': 'weibo.js'} 
23:06:38 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = 'weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:06:38 完整请求
23:06:38 请求结束
23:06:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:06:38 path and query /api/weibo/all {} 
23:06:38 kwargs,  {'weibo_id': 1} <class 'dict'>
23:06:38 kwargs,  {'weibo_id': 2} <class 'dict'>
23:06:38 kwargs,  {'weibo_id': 3} <class 'dict'>
23:06:38 kwargs,  {'weibo_id': 6} <class 'dict'>
23:06:38 kwargs,  {'weibo_id': 7} <class 'dict'>
23:06:38 kwargs,  {'weibo_id': 8} <class 'dict'>
23:06:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "nihao",
    "id": 8,
    "comments": []
  }
]
23:06:39 完整请求
23:06:39 请求结束
23:06:39 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:06:39 path and query /static {'file': 'weibo.js'} 
23:06:39 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = 'weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

23:06:50 完整请求
23:06:50 请求结束
23:06:50 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
23:06:50 path and query /api/weibo/update {} {"id":"8","content":"你好"}
23:06:50 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
23:07:10 完整请求
23:07:10 请求结束
09:01:00 完整请求
09:01:00 请求结束
09:02:06 完整请求
09:02:06 请求结束
09:02:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:06 path and query /weibo/index {} 
09:02:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:02:06 完整请求
09:02:06 请求结束
09:02:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:06 path and query /static {'file': 'gua.js'} 
09:02:06 完整请求
09:02:06 请求结束
09:02:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:06 path and query /static {'file': 'weibo.js'} 
09:02:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:02:06 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = 'weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:02:07 完整请求
09:02:07 请求结束
09:02:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:07 path and query /api/weibo/all {} 
09:02:07 完整请求
09:02:07 完整请求
09:02:07 请求结束
09:02:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:07 path and query /api/weibo/all {} 
09:02:07 请求结束
09:02:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:07 path and query /static {'file': 'weibo.js'} 
09:02:07 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = 'weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:02:07 完整请求
09:02:07 请求结束
09:02:07 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:07 path and query /api/weibo/all {} 
09:02:13 完整请求
09:02:13 请求结束
09:02:13 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:13 path and query /weibo/index {} 
09:02:13 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:02:14 完整请求
09:02:14 请求结束
09:02:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:14 path and query /static {'file': 'gua.js'} 
09:02:14 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:02:14 完整请求
09:02:14 请求结束
09:02:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:14 path and query /static {'file': 'weibo.js'} 
09:02:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = 'weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:02:14 完整请求
09:02:14 请求结束
09:02:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:14 path and query /api/weibo/all {} 
09:02:14 完整请求
09:02:14 请求结束
09:02:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:14 path and query /static {'file': 'weibo.js'} 
09:02:14 完整请求
09:02:14 请求结束
09:02:14 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:14 path and query /api/weibo/all {} 
09:02:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = 'weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:02:15 完整请求
09:02:15 请求结束
09:02:15 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:15 path and query /api/weibo/all {} 
09:02:33 完整请求
09:02:33 请求结束
09:02:33 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:33 path and query /weibo/index {} 
09:02:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:02:34 完整请求
09:02:34 请求结束
09:02:34 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:34 path and query /static {'file': 'gua.js'} 
09:02:34 完整请求
09:02:34 请求结束
09:02:34 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:34 path and query /static {'file': 'weibo.js'} 
09:02:34 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:02:34 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = 'weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:02:34 完整请求
09:02:34 请求结束
09:02:34 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:34 path and query /api/weibo/all {} 
09:02:34 kwargs,  {'weibo_id': 1} <class 'dict'>
09:02:34 kwargs,  {'weibo_id': 2} <class 'dict'>
09:02:34 kwargs,  {'weibo_id': 3} <class 'dict'>
09:02:34 kwargs,  {'weibo_id': 6} <class 'dict'>
09:02:34 kwargs,  {'weibo_id': 7} <class 'dict'>
09:02:34 kwargs,  {'weibo_id': 8} <class 'dict'>
09:02:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ]
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ]
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ]
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "nihao",
    "id": 8,
    "comments": []
  }
]
09:02:34 完整请求
09:02:34 请求结束
09:02:34 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:34 path and query /static {'file': 'weibo.js'} 
09:02:34 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = 'weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:02:54 完整请求
09:02:54 请求结束
09:02:54 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:02:54 path and query /api/weibo/update {} {"id":"8","content":"你"}
09:02:54 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
09:04:19 完整请求
09:04:19 请求结束
09:04:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:04:19 path and query /weibo/index {} 
09:04:19 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:04:19 完整请求
09:04:19 完整请求
09:04:19 请求结束
09:04:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:04:19 path and query /static {'file': 'weibo.js'} 
09:04:19 请求结束
09:04:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:04:19 path and query /static {'file': 'gua.js'} 
09:04:19 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = 'weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:04:19 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:04:20 完整请求
09:04:20 请求结束
09:04:20 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:04:20 path and query /api/weibo/all {} 
09:04:20 kwargs,  {'weibo_id': 1} <class 'dict'>
09:04:20 kwargs,  {'weibo_id': 2} <class 'dict'>
09:04:20 kwargs,  {'weibo_id': 3} <class 'dict'>
09:04:20 kwargs,  {'weibo_id': 6} <class 'dict'>
09:04:20 kwargs,  {'weibo_id': 7} <class 'dict'>
09:04:20 kwargs,  {'weibo_id': 8} <class 'dict'>
09:04:20 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "nihao",
    "id": 8,
    "comments": []
  }
]
09:04:20 完整请求
09:04:20 请求结束
09:04:20 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:04:20 path and query /static {'file': 'weibo.js'} 
09:04:20 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = 'weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:04:31 完整请求
09:04:31 请求结束
09:04:31 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:04:31 path and query /api/weibo/update {} {"id":"8","content":"你好"}
09:04:31 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
09:05:27 完整请求
09:05:27 请求结束
09:05:57 完整请求
09:05:57 请求结束
09:05:57 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:05:57 path and query /weibo/index {} 
09:05:57 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:05:58 完整请求
09:05:58 请求结束
09:05:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:05:58 path and query /static {'file': 'gua.js'} 
09:05:58 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:05:58 完整请求
09:05:58 请求结束
09:05:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:05:58 path and query /static {'file': 'weibo.js'} 
09:05:58 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:05:58 完整请求
09:05:58 请求结束
09:05:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:05:58 path and query /api/weibo/all {} 
09:05:58 kwargs,  {'weibo_id': 1} <class 'dict'>
09:05:58 kwargs,  {'weibo_id': 2} <class 'dict'>
09:05:58 kwargs,  {'weibo_id': 3} <class 'dict'>
09:05:58 kwargs,  {'weibo_id': 6} <class 'dict'>
09:05:58 kwargs,  {'weibo_id': 7} <class 'dict'>
09:05:58 kwargs,  {'weibo_id': 8} <class 'dict'>
09:05:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "nihao",
    "id": 8,
    "comments": []
  }
]
09:05:59 完整请求
09:05:59 请求结束
09:05:59 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:05:59 path and query /static {'file': 'weibo.js'} 
09:05:59 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:06:09 完整请求
09:06:09 请求结束
09:06:09 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:06:09 path and query /api/weibo/update {} {"id":"8","content":"你好"}
09:06:09 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
09:12:38 完整请求
09:12:38 请求结束
09:12:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:12:38 path and query /weibo/index {} 
09:12:38 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:12:38 完整请求
09:12:38 请求结束
09:12:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:12:38 path and query /static {'file': 'gua.js'} 
09:12:38 完整请求
09:12:38 请求结束
09:12:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:12:38 path and query /static {'file': 'weibo.js'} 
09:12:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:12:38 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:12:39 完整请求
09:12:39 请求结束
09:12:39 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:12:39 path and query /api/weibo/all {} 
09:12:39 kwargs,  {'weibo_id': 1} <class 'dict'>
09:12:39 kwargs,  {'weibo_id': 2} <class 'dict'>
09:12:39 kwargs,  {'weibo_id': 3} <class 'dict'>
09:12:39 kwargs,  {'weibo_id': 6} <class 'dict'>
09:12:39 kwargs,  {'weibo_id': 7} <class 'dict'>
09:12:39 kwargs,  {'weibo_id': 8} <class 'dict'>
09:12:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "nihao",
    "id": 8,
    "comments": []
  }
]
09:12:39 完整请求
09:12:39 请求结束
09:12:39 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:12:39 path and query /static {'file': 'weibo.js'} 
09:12:39 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:12:47 完整请求
09:12:47 请求结束
09:12:47 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:12:47 path and query /api/weibo/update {} {"id":"8","content":"你好"}
09:12:47 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
09:13:59 完整请求
09:13:59 请求结束
09:13:59 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:13:59 path and query /weibo/index {} 
09:13:59 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:13:59 完整请求
09:13:59 请求结束
09:13:59 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:13:59 path and query /static {'file': 'gua.js'} 
09:13:59 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:13:59 完整请求
09:13:59 请求结束
09:13:59 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:13:59 path and query /static {'file': 'weibo.js'} 
09:13:59 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:14:00 完整请求
09:14:00 请求结束
09:14:00 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:14:00 path and query /api/weibo/all {} 
09:14:00 kwargs,  {'weibo_id': 1} <class 'dict'>
09:14:00 kwargs,  {'weibo_id': 2} <class 'dict'>
09:14:00 kwargs,  {'weibo_id': 3} <class 'dict'>
09:14:00 kwargs,  {'weibo_id': 6} <class 'dict'>
09:14:00 kwargs,  {'weibo_id': 7} <class 'dict'>
09:14:00 kwargs,  {'weibo_id': 8} <class 'dict'>
09:14:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "nihao",
    "id": 8,
    "comments": []
  }
]
09:14:00 完整请求
09:14:00 请求结束
09:14:00 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:14:00 path and query /static {'file': 'weibo.js'} 
09:14:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:14:10 完整请求
09:14:10 请求结束
09:14:10 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:14:10 path and query /api/weibo/update {} {"id":"8","content":"你好"}
09:14:10 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
09:15:51 完整请求
09:15:51 请求结束
09:15:51 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:15:51 path and query /weibo/index {} 
09:15:51 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:15:51 完整请求
09:15:51 请求结束
09:15:51 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:15:51 path and query /static {'file': 'gua.js'} 
09:15:51 完整请求
09:15:51 请求结束
09:15:51 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:15:51 path and query /static {'file': 'weibo.js'} 
09:15:51 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:15:51 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:15:52 完整请求
09:15:52 请求结束
09:15:52 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:15:52 path and query /api/weibo/all {} 
09:15:52 kwargs,  {'weibo_id': 1} <class 'dict'>
09:15:52 kwargs,  {'weibo_id': 2} <class 'dict'>
09:15:52 kwargs,  {'weibo_id': 3} <class 'dict'>
09:15:52 kwargs,  {'weibo_id': 6} <class 'dict'>
09:15:52 kwargs,  {'weibo_id': 7} <class 'dict'>
09:15:52 kwargs,  {'weibo_id': 8} <class 'dict'>
09:15:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "id": 1,
    "comments": [
      {
        "weibo_id": 1,
        "content": "楼主说得对",
        "id": 1,
        "user_id": 2
      },
      {
        "weibo_id": 1,
        "content": "lbvu is right",
        "id": 2,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "你好",
    "id": 2,
    "comments": [
      {
        "weibo_id": 2,
        "content": "hello",
        "id": 3,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "123",
        "id": 4,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "asdf",
        "id": 5,
        "user_id": 1
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 7,
        "user_id": 2
      },
      {
        "weibo_id": 2,
        "content": "说得好",
        "id": 8,
        "user_id": 2
      }
    ],
    "user_id": 1
  },
  {
    "content": "hahaha",
    "id": 3,
    "comments": [
      {
        "weibo_id": 3,
        "content": "123",
        "id": 6,
        "user_id": 1
      }
    ],
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "nihao",
    "id": 8,
    "comments": []
  }
]
09:15:52 完整请求
09:15:52 请求结束
09:15:52 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:15:52 path and query /static {'file': 'weibo.js'} 
09:15:52 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:16:02 完整请求
09:16:02 请求结束
09:16:02 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:16:02 path and query /api/weibo/update {} {"id":"8","content":"你好"}
09:16:02 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
09:17:16 完整请求
09:17:16 请求结束
09:17:16 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:17:16 path and query /weibo/index {} 
09:17:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:17:16 完整请求
09:17:16 请求结束
09:17:16 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:17:16 path and query /static {'file': 'weibo.js'} 
09:17:16 完整请求
09:17:16 请求结束
09:17:16 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:17:16 path and query /static {'file': 'gua.js'} 
09:17:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.title
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:17:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:17:16 完整请求
09:17:16 请求结束
09:17:16 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:17:16 path and query /api/weibo/all {} 
09:17:16 kwargs,  {'weibo_id': 1} <class 'dict'>
09:17:16 kwargs,  {'weibo_id': 2} <class 'dict'>
09:17:16 kwargs,  {'weibo_id': 3} <class 'dict'>
09:17:16 kwargs,  {'weibo_id': 6} <class 'dict'>
09:17:16 kwargs,  {'weibo_id': 7} <class 'dict'>
09:17:16 kwargs,  {'weibo_id': 8} <class 'dict'>
09:17:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1
      }
    ],
    "content": "hello tweet",
    "user_id": 1
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 4,
        "content": "123",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 5,
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 7,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      }
    ],
    "content": "你好",
    "user_id": 1
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "user_id": 1,
        "weibo_id": 3
      }
    ],
    "content": "hahaha",
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "nihao",
    "id": 8,
    "comments": []
  }
]
09:17:37 完整请求
09:17:37 请求结束
09:17:37 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:17:37 path and query /api/weibo/update {} {"id":"8","content":"你好"}
09:17:37 kwargs,  {'id': 8} <class 'dict'>
09:17:37 debug 5
09:17:37 kwargs,  {'weibo_id': 8} <class 'dict'>
09:17:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "你好",
  "id": 8,
  "comments": []
}
09:19:06 完整请求
09:19:06 请求结束
09:19:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:19:06 path and query /weibo/index {} 
09:19:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:19:06 完整请求
09:19:06 请求结束
09:19:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:19:06 path and query /static {'file': 'gua.js'} 
09:19:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:19:06 完整请求
09:19:06 请求结束
09:19:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:19:06 path and query /static {'file': 'weibo.js'} 
09:19:06 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:19:06 完整请求
09:19:06 请求结束
09:19:06 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:19:06 path and query /api/weibo/all {} 
09:19:06 kwargs,  {'weibo_id': 1} <class 'dict'>
09:19:06 kwargs,  {'weibo_id': 2} <class 'dict'>
09:19:06 kwargs,  {'weibo_id': 3} <class 'dict'>
09:19:06 kwargs,  {'weibo_id': 6} <class 'dict'>
09:19:06 kwargs,  {'weibo_id': 7} <class 'dict'>
09:19:06 kwargs,  {'weibo_id': 8} <class 'dict'>
09:19:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1
      }
    ],
    "content": "hello tweet",
    "user_id": 1
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 4,
        "content": "123",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 5,
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 7,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      }
    ],
    "content": "你好",
    "user_id": 1
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "user_id": 1,
        "weibo_id": 3
      }
    ],
    "content": "hahaha",
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "你好",
    "id": 8,
    "comments": []
  }
]
09:19:16 完整请求
09:19:16 请求结束
09:19:16 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:19:16 path and query /api/weibo/update {} {"id":"8","content":"你好吗"}
09:19:16 kwargs,  {'id': 8} <class 'dict'>
09:19:16 debug 5
09:19:16 kwargs,  {'weibo_id': 8} <class 'dict'>
09:19:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "你好吗",
  "id": 8,
  "comments": []
}
09:20:30 完整请求
09:20:30 请求结束
09:20:30 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:20:30 path and query /weibo/index {} 
09:20:30 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:20:30 完整请求
09:20:30 请求结束
09:20:30 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:20:30 path and query /static {'file': 'gua.js'} 
09:20:30 完整请求
09:20:30 请求结束
09:20:30 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:20:30 path and query /static {'file': 'weibo.js'} 
09:20:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:20:30 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:20:30 完整请求
09:20:30 请求结束
09:20:30 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:20:30 path and query /api/weibo/all {} 
09:20:30 kwargs,  {'weibo_id': 1} <class 'dict'>
09:20:30 kwargs,  {'weibo_id': 2} <class 'dict'>
09:20:30 kwargs,  {'weibo_id': 3} <class 'dict'>
09:20:30 kwargs,  {'weibo_id': 6} <class 'dict'>
09:20:30 kwargs,  {'weibo_id': 7} <class 'dict'>
09:20:30 kwargs,  {'weibo_id': 8} <class 'dict'>
09:20:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1
      }
    ],
    "content": "hello tweet",
    "user_id": 1
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 4,
        "content": "123",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 5,
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 7,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      }
    ],
    "content": "你好",
    "user_id": 1
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "user_id": 1,
        "weibo_id": 3
      }
    ],
    "content": "hahaha",
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "你好吗",
    "id": 8,
    "comments": []
  }
]
09:20:38 完整请求
09:20:38 请求结束
09:20:38 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:20:38 path and query /api/weibo/update {} {"id":"8","content":"你好"}
09:20:38 kwargs,  {'id': 8} <class 'dict'>
09:20:38 debug 5
09:20:38 kwargs,  {'weibo_id': 8} <class 'dict'>
09:20:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "你好",
  "id": 8,
  "comments": []
}
09:32:04 完整请求
09:32:04 请求结束
09:32:04 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:32:04 path and query /weibo/index {} 
09:32:04 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:32:05 完整请求
09:32:05 请求结束
09:32:05 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:32:05 path and query /static {'file': 'gua.js'} 
09:32:05 完整请求
09:32:05 请求结束
09:32:05 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:32:05 path and query /static {'file': 'weibo.js'} 
09:32:05 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:32:05 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        log('点击到了添加评论', title)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:32:18 完整请求
09:32:18 请求结束
09:32:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:32:18 path and query /weibo/index {} 
09:32:18 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:32:19 完整请求
09:32:19 请求结束
09:32:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:32:19 path and query /static {'file': 'gua.js'} 
09:32:19 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:32:19 完整请求
09:32:19 请求结束
09:32:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:32:19 path and query /static {'file': 'weibo.js'} 
09:32:19 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        log('点击到了添加评论', title)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:32:19 完整请求
09:32:19 请求结束
09:32:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:32:19 path and query /api/weibo/all {} 
09:32:19 kwargs,  {'weibo_id': 1} <class 'dict'>
09:32:19 kwargs,  {'weibo_id': 2} <class 'dict'>
09:32:19 kwargs,  {'weibo_id': 3} <class 'dict'>
09:32:19 kwargs,  {'weibo_id': 6} <class 'dict'>
09:32:19 kwargs,  {'weibo_id': 7} <class 'dict'>
09:32:19 kwargs,  {'weibo_id': 8} <class 'dict'>
09:32:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1
      }
    ],
    "content": "hello tweet",
    "user_id": 1
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 4,
        "content": "123",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 5,
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 7,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      }
    ],
    "content": "你好",
    "user_id": 1
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "user_id": 1,
        "weibo_id": 3
      }
    ],
    "content": "hahaha",
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "你好",
    "id": 8,
    "comments": []
  }
]
09:33:55 完整请求
09:33:55 请求结束
09:33:55 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:33:55 path and query /weibo/index {} 
09:33:55 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:33:55 完整请求
09:33:55 请求结束
09:33:55 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:33:55 path and query /static {'file': 'gua.js'} 
09:33:55 完整请求
09:33:55 请求结束
09:33:55 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:33:55 path and query /static {'file': 'weibo.js'} 
09:33:55 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:33:55 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('点击到了添加评论', title)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:33:55 完整请求
09:33:55 请求结束
09:33:55 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:33:55 path and query /api/weibo/all {} 
09:33:55 kwargs,  {'weibo_id': 1} <class 'dict'>
09:33:55 kwargs,  {'weibo_id': 2} <class 'dict'>
09:33:55 kwargs,  {'weibo_id': 3} <class 'dict'>
09:33:55 kwargs,  {'weibo_id': 6} <class 'dict'>
09:33:55 kwargs,  {'weibo_id': 7} <class 'dict'>
09:33:55 kwargs,  {'weibo_id': 8} <class 'dict'>
09:33:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1
      }
    ],
    "content": "hello tweet",
    "user_id": 1
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 4,
        "content": "123",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 5,
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 7,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      }
    ],
    "content": "你好",
    "user_id": 1
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "user_id": 1,
        "weibo_id": 3
      }
    ],
    "content": "hahaha",
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "你好",
    "id": 8,
    "comments": []
  }
]
09:36:01 完整请求
09:36:01 请求结束
09:36:01 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:36:01 path and query /weibo/index {} 
09:36:01 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content" id="input-comment-add">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:36:01 完整请求
09:36:01 请求结束
09:36:01 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:36:01 path and query /static {'file': 'gua.js'} 
09:36:01 完整请求
09:36:01 请求结束
09:36:01 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:36:01 path and query /static {'file': 'weibo.js'} 
09:36:01 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:36:01 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('点击到了添加评论', title)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:36:01 完整请求
09:36:01 请求结束
09:36:01 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:36:01 path and query /api/weibo/all {} 
09:36:01 kwargs,  {'weibo_id': 1} <class 'dict'>
09:36:01 kwargs,  {'weibo_id': 2} <class 'dict'>
09:36:01 kwargs,  {'weibo_id': 3} <class 'dict'>
09:36:01 kwargs,  {'weibo_id': 6} <class 'dict'>
09:36:01 kwargs,  {'weibo_id': 7} <class 'dict'>
09:36:01 kwargs,  {'weibo_id': 8} <class 'dict'>
09:36:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1
      }
    ],
    "content": "hello tweet",
    "user_id": 1
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 4,
        "content": "123",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 5,
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 7,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      }
    ],
    "content": "你好",
    "user_id": 1
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "user_id": 1,
        "weibo_id": 3
      }
    ],
    "content": "hahaha",
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "你好",
    "id": 8,
    "comments": []
  }
]
09:36:58 完整请求
09:36:58 请求结束
09:36:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:36:58 path and query /weibo/index {} 
09:36:58 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:36:58 完整请求
09:36:58 请求结束
09:36:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:36:58 path and query /static {'file': 'gua.js'} 
09:36:58 完整请求
09:36:58 请求结束
09:36:58 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:36:58 path and query /static {'file': 'weibo.js'} 
09:36:58 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('点击到了添加评论', title)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:36:58 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:37:29 完整请求
09:37:29 请求结束
09:37:29 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:37:29 path and query /weibo/index {} 
09:37:29 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content" id="input-comment-add">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:37:29 完整请求
09:37:29 请求结束
09:37:29 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:37:29 path and query /static {'file': 'gua.js'} 
09:37:29 完整请求
09:37:29 请求结束
09:37:29 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:37:29 path and query /static {'file': 'weibo.js'} 
09:37:29 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:37:29 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('点击到了添加评论', title)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:37:29 完整请求
09:37:29 请求结束
09:37:29 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:37:29 path and query /api/weibo/all {} 
09:37:29 kwargs,  {'weibo_id': 1} <class 'dict'>
09:37:29 kwargs,  {'weibo_id': 2} <class 'dict'>
09:37:29 kwargs,  {'weibo_id': 3} <class 'dict'>
09:37:29 kwargs,  {'weibo_id': 6} <class 'dict'>
09:37:29 kwargs,  {'weibo_id': 7} <class 'dict'>
09:37:29 kwargs,  {'weibo_id': 8} <class 'dict'>
09:37:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1
      }
    ],
    "content": "hello tweet",
    "user_id": 1
  },
  {
    "id": 2,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 4,
        "content": "123",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 5,
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2
      },
      {
        "id": 7,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2
      }
    ],
    "content": "你好",
    "user_id": 1
  },
  {
    "id": 3,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "user_id": 1,
        "weibo_id": 3
      }
    ],
    "content": "hahaha",
    "user_id": 1
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "你好",
    "id": 8,
    "comments": []
  }
]
09:52:54 完整请求
09:52:54 请求结束
09:52:54 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:52:54 path and query /weibo/index {} 
09:52:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content" id="input-comment-add">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:52:54 完整请求
09:52:54 请求结束
09:52:54 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:52:54 path and query /static {'file': 'gua.js'} 
09:52:54 完整请求
09:52:54 请求结束
09:52:54 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:52:54 path and query /static {'file': 'weibo.js'} 
09:52:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:52:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('.comment-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('点击到了添加评论', title)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:53:03 完整请求
09:53:03 请求结束
09:53:03 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:53:03 path and query /static {'file': 'weibo.js'} 
09:53:03 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('.comment-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('点击到了添加评论', title)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:53:25 完整请求
09:53:25 请求结束
09:53:25 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:53:25 path and query /weibo/index {} 
09:53:25 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content" id="input-comment-add">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:53:26 完整请求
09:53:26 请求结束
09:53:26 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:53:26 path and query /static {'file': 'gua.js'} 
09:53:26 完整请求
09:53:26 请求结束
09:53:26 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:53:26 path and query /static {'file': 'weibo.js'} 
09:53:26 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:53:26 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('点击到了添加评论', title)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:53:26 完整请求
09:53:26 请求结束
09:53:26 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:53:26 path and query /api/weibo/all {} 
09:53:26 kwargs,  {'weibo_id': 1} <class 'dict'>
09:53:26 kwargs,  {'weibo_id': 2} <class 'dict'>
09:53:26 kwargs,  {'weibo_id': 3} <class 'dict'>
09:53:26 kwargs,  {'weibo_id': 6} <class 'dict'>
09:53:26 kwargs,  {'weibo_id': 7} <class 'dict'>
09:53:26 kwargs,  {'weibo_id': 8} <class 'dict'>
09:53:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "user_id": 1,
    "id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ]
  },
  {
    "content": "你好",
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ]
  },
  {
    "content": "hahaha",
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ]
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "你好",
    "id": 8,
    "comments": []
  }
]
09:53:27 完整请求
09:53:27 请求结束
09:53:27 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:53:27 path and query /static {'file': 'weibo.js'} 
09:53:27 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('点击到了添加评论', title)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:57:02 完整请求
09:57:02 请求结束
09:57:02 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:57:02 path and query /weibo/index {} 
09:57:02 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content" id="input-comment-add">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
09:57:03 完整请求
09:57:03 请求结束
09:57:03 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:57:03 path and query /static {'file': 'gua.js'} 
09:57:03 完整请求
09:57:03 请求结束
09:57:03 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:57:03 path and query /static {'file': 'weibo.js'} 
09:57:03 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

09:57:03 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        log('hello')
        var input = e('#input-comment-add')

        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('点击到了添加评论', title)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:57:03 完整请求
09:57:03 请求结束
09:57:03 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:57:03 path and query /api/weibo/all {} 
09:57:03 kwargs,  {'weibo_id': 1} <class 'dict'>
09:57:03 kwargs,  {'weibo_id': 2} <class 'dict'>
09:57:03 kwargs,  {'weibo_id': 3} <class 'dict'>
09:57:03 kwargs,  {'weibo_id': 6} <class 'dict'>
09:57:03 kwargs,  {'weibo_id': 7} <class 'dict'>
09:57:03 kwargs,  {'weibo_id': 8} <class 'dict'>
09:57:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "user_id": 1,
    "id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ]
  },
  {
    "content": "你好",
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ]
  },
  {
    "content": "hahaha",
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ]
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "你好",
    "id": 8,
    "comments": []
  }
]
09:57:03 完整请求
09:57:03 请求结束
09:57:03 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:57:03 path and query /static {'file': 'weibo.js'} 
09:57:03 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        log('hello')
        var input = e('#input-comment-add')

        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        log('点击到了添加评论', title)
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

09:57:15 完整请求
09:57:15 请求结束
09:57:15 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
09:57:15 path and query /api/weibo/add {} {"content":"f"}
09:57:15 kwargs,  {'weibo_id': 9} <class 'dict'>
09:57:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "content": "f",
  "id": 9,
  "comments": []
}
10:05:23 完整请求
10:05:23 请求结束
10:05:23 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:05:23 path and query /weibo/index {} 
10:05:23 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment-list">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content" id="input-comment-add">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
10:05:24 完整请求
10:05:24 请求结束
10:05:24 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:05:24 path and query /static {'file': 'gua.js'} 
10:05:24 完整请求
10:05:24 请求结束
10:05:24 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:05:24 path and query /static {'file': 'weibo.js'} 
10:05:24 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

10:05:24 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('#comment-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

10:05:24 完整请求
10:05:24 请求结束
10:05:24 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:05:24 path and query /static {'file': 'weibo.js'} 
10:05:24 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('#comment-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

10:05:40 完整请求
10:05:40 请求结束
10:05:40 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:05:40 path and query /weibo/index {} 
10:05:40 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment-list">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content" id="input-comment-add">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
10:05:40 完整请求
10:05:40 请求结束
10:05:40 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:05:40 path and query /static {'file': 'gua.js'} 
10:05:40 完整请求
10:05:40 请求结束
10:05:40 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:05:40 path and query /static {'file': 'weibo.js'} 
10:05:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

10:05:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('#comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

10:05:41 完整请求
10:05:41 请求结束
10:05:41 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:05:41 path and query /static {'file': 'weibo.js'} 
10:05:41 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('#comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

10:05:53 完整请求
10:05:53 请求结束
10:05:53 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:05:53 path and query /weibo/index {} 
10:05:53 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment-list">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content" id="input-comment-add">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
10:05:54 完整请求
10:05:54 请求结束
10:05:54 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:05:54 path and query /static {'file': 'gua.js'} 
10:05:54 完整请求
10:05:54 请求结束
10:05:54 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:05:54 path and query /static {'file': 'weibo.js'} 
10:05:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

10:05:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('#comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

10:05:54 完整请求
10:05:54 请求结束
10:05:54 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:05:54 path and query /static {'file': 'weibo.js'} 
10:05:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('#comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

10:06:01 完整请求
10:06:01 请求结束
10:06:18 完整请求
10:06:18 请求结束
10:06:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:06:18 path and query /weibo/index {} 
10:06:18 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment-list">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content" id="input-comment-add">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
10:06:18 完整请求
10:06:18 请求结束
10:06:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:06:18 path and query /static {'file': 'gua.js'} 
10:06:18 完整请求
10:06:18 请求结束
10:06:18 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:06:18 path and query /static {'file': 'weibo.js'} 
10:06:18 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    //log('data', data)
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            //log('*****', r.response)
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求S
    //log('data', data)
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    //log('path', path)
    ajax('GET', path, '', callback)
}

var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

10:06:18 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

10:06:19 完整请求
10:06:19 请求结束
10:06:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:06:19 path and query /api/weibo/all {} 
10:06:19 kwargs,  {'weibo_id': 1} <class 'dict'>
10:06:19 kwargs,  {'weibo_id': 2} <class 'dict'>
10:06:19 kwargs,  {'weibo_id': 3} <class 'dict'>
10:06:19 kwargs,  {'weibo_id': 6} <class 'dict'>
10:06:19 kwargs,  {'weibo_id': 7} <class 'dict'>
10:06:19 kwargs,  {'weibo_id': 8} <class 'dict'>
10:06:19 kwargs,  {'weibo_id': 9} <class 'dict'>
10:06:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "content": "hello tweet",
    "user_id": 1,
    "id": 1,
    "comments": [
      {
        "content": "楼主说得对",
        "user_id": 2,
        "weibo_id": 1,
        "id": 1
      },
      {
        "content": "lbvu is right",
        "user_id": 1,
        "weibo_id": 1,
        "id": 2
      }
    ]
  },
  {
    "content": "你好",
    "user_id": 1,
    "id": 2,
    "comments": [
      {
        "content": "hello",
        "user_id": 1,
        "weibo_id": 2,
        "id": 3
      },
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 2,
        "id": 4
      },
      {
        "content": "asdf",
        "user_id": 1,
        "weibo_id": 2,
        "id": 5
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 7
      },
      {
        "content": "说得好",
        "user_id": 2,
        "weibo_id": 2,
        "id": 8
      }
    ]
  },
  {
    "content": "hahaha",
    "user_id": 1,
    "id": 3,
    "comments": [
      {
        "content": "123",
        "user_id": 1,
        "weibo_id": 3,
        "id": 6
      }
    ]
  },
  {
    "content": "dsafddf",
    "id": 6,
    "comments": []
  },
  {
    "content": "fegvdf",
    "id": 7,
    "comments": []
  },
  {
    "content": "你好",
    "id": 8,
    "comments": []
  },
  {
    "content": "f",
    "id": 9,
    "comments": []
  }
]
10:06:19 完整请求
10:06:19 请求结束
10:06:19 cookie ['username-localhost-8888="2|1:0|10:1543920989|23:username-localhost-8888|44:MjVhM2UwZGM5ODE3NGM5N2E2NGU0YjFlZGVjNmE1YmQ=|e88cc933c40f6cbaa25e9a1d89a02c8ef941070dd63a36e730fa14b4a2d2800e"']
10:06:19 path and query /static {'file': 'weibo.js'} 
10:06:19 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var WeiboTemplate = function(Weibo) {
    var content = Weibo.content
    log('content :', content, Weibo)
    var id = Weibo.id
    var comments = commentsTemplate(Weibo.comments)
    var t = `
        <div class='weibo-cell' data-id="${id}" id='weibo-${id}'>
            <span class='weibo-title'>[WEIBO]: ${content}</span>
            <button class="weibo-edit">编辑</button>
            <button class="weibo-delete">删除weibo</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" id="input-comment-add">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="Weibo-cell">
        <button class="Weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(Weibo)
    */
}

var insertWeibo = function(Weibo) {
    var WeiboCell = WeiboTemplate(Weibo)
    // 插入 Weibo-list
    var WeiboList = e('.weibo-list')
    WeiboList.insertAdjacentHTML('beforeend', WeiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadWeibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var Weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < Weibos.length; i++) {
            var Weibo = Weibos[i]
            insertWeibo(Weibo)
        }
    })
}

var bindEventWeiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        //log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEventWeiboDelete = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 Weibo
            //log('come hereS')
            var WeiboCell = self.parentElement
            var Weibo_id = WeiboCell.dataset.id
            apiWeiboDelete(Weibo_id, function(r){
                log('删除成功', Weibo_id)
                WeiboCell.remove()
            })
        }
    })
}

var bindEventWeiboEdit = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 Weibo
            var WeiboCell = self.parentElement
            insertEditForm(WeiboCell)
        }
    })
}


var bindEventWeiboUpdate = function() {
    var WeiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    WeiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var WeiboCell = self.closest('.weibo-cell')
            var Weibo_id = WeiboCell.dataset.id
            var form = {
                'id': Weibo_id,
                'content': title,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', Weibo_id)
                var Weibo = JSON.parse(r)
                var selector = '#weibo-' + Weibo.id
                var WeiboCell = e(selector)
                var titleSpan = WeiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = '[WEIBO]: ' + Weibo.content
//                WeiboCell.remove()
            })
        }
    })
}

var bindEventCommentAdd = function() {
    var b = e('.comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#input-comment-add')
        var title = input.value
        log('click add', title)
        var form = {
            'content': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var Weibo = JSON.parse(r)
            //log('weibo', Weibo)
            insertWeibo(Weibo)
        })
    })
}

var bindEvents = function() {
    bindEventWeiboAdd()
    bindEventWeiboDelete()
    bindEventWeiboEdit()
    bindEventWeiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadWeibos()
}

__main()

